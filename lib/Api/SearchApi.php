<?php
/**
 * SearchApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Distributor PPU Service
 *
 * Â© KnowRoaming LTD 2017
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SearchApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation searchDataCdr
     *
     * Search Data CDRs
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $q The query string (optional, default to *:*)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  int $start Number of leading records to skip (optional, default to 0)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (optional, default to 10)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_data_cdr include the children data cdr to the response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseListResponseDataCdr
     */
    public function searchDataCdr($distributor_id, $request_id = null, $q = '*:*', $fq = null, $sort = null, $start = '0', $rows = '10', $fl = null, $df = null, $with_children_data_cdr = null)
    {
        list($response) = $this->searchDataCdrWithHttpInfo($distributor_id, $request_id, $q, $fq, $sort, $start, $rows, $fl, $df, $with_children_data_cdr);
        return $response;
    }

    /**
     * Operation searchDataCdrWithHttpInfo
     *
     * Search Data CDRs
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $q The query string (optional, default to *:*)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  int $start Number of leading records to skip (optional, default to 0)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (optional, default to 10)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_data_cdr include the children data cdr to the response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseListResponseDataCdr, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchDataCdrWithHttpInfo($distributor_id, $request_id = null, $q = '*:*', $fq = null, $sort = null, $start = '0', $rows = '10', $fl = null, $df = null, $with_children_data_cdr = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseDataCdr';
        $request = $this->searchDataCdrRequest($distributor_id, $request_id, $q, $fq, $sort, $start, $rows, $fl, $df, $with_children_data_cdr);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseListResponseDataCdr',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchDataCdrAsync
     *
     * Search Data CDRs
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $q The query string (optional, default to *:*)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  int $start Number of leading records to skip (optional, default to 0)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (optional, default to 10)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_data_cdr include the children data cdr to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchDataCdrAsync($distributor_id, $request_id = null, $q = '*:*', $fq = null, $sort = null, $start = '0', $rows = '10', $fl = null, $df = null, $with_children_data_cdr = null)
    {
        return $this->searchDataCdrAsyncWithHttpInfo($distributor_id, $request_id, $q, $fq, $sort, $start, $rows, $fl, $df, $with_children_data_cdr)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchDataCdrAsyncWithHttpInfo
     *
     * Search Data CDRs
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $q The query string (optional, default to *:*)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  int $start Number of leading records to skip (optional, default to 0)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (optional, default to 10)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_data_cdr include the children data cdr to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchDataCdrAsyncWithHttpInfo($distributor_id, $request_id = null, $q = '*:*', $fq = null, $sort = null, $start = '0', $rows = '10', $fl = null, $df = null, $with_children_data_cdr = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseDataCdr';
        $request = $this->searchDataCdrRequest($distributor_id, $request_id, $q, $fq, $sort, $start, $rows, $fl, $df, $with_children_data_cdr);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchDataCdr'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $q The query string (optional, default to *:*)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  int $start Number of leading records to skip (optional, default to 0)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (optional, default to 10)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_data_cdr include the children data cdr to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchDataCdrRequest($distributor_id, $request_id = null, $q = '*:*', $fq = null, $sort = null, $start = '0', $rows = '10', $fl = null, $df = null, $with_children_data_cdr = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling searchDataCdr'
            );
        }

        $resourcePath = '/{distributorId}/search/cdr/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q, null);
        }
        // query params
        if (is_array($fq)) {
            $fq = ObjectSerializer::serializeCollection($fq, 'multi', true);
        }
        if ($fq !== null) {
            $queryParams['fq'] = ObjectSerializer::toQueryValue($fq, null);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start, 'int32');
        }
        // query params
        if ($rows !== null) {
            $queryParams['rows'] = ObjectSerializer::toQueryValue($rows, 'int32');
        }
        // query params
        if ($fl !== null) {
            $queryParams['fl'] = ObjectSerializer::toQueryValue($fl, null);
        }
        // query params
        if ($df !== null) {
            $queryParams['df'] = ObjectSerializer::toQueryValue($df, null);
        }
        // query params
        if ($with_children_data_cdr !== null) {
            $queryParams['withChildrenDataCdr'] = ObjectSerializer::toQueryValue($with_children_data_cdr, null);
        }
        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchDistributors
     *
     * Search distributors
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_distributor include the children distributor to the response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseListResponseSearchDistributor
     */
    public function searchDistributors($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_distributor = null)
    {
        list($response) = $this->searchDistributorsWithHttpInfo($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df, $with_children_distributor);
        return $response;
    }

    /**
     * Operation searchDistributorsWithHttpInfo
     *
     * Search distributors
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_distributor include the children distributor to the response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseListResponseSearchDistributor, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchDistributorsWithHttpInfo($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_distributor = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseSearchDistributor';
        $request = $this->searchDistributorsRequest($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df, $with_children_distributor);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseListResponseSearchDistributor',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchDistributorsAsync
     *
     * Search distributors
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_distributor include the children distributor to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchDistributorsAsync($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_distributor = null)
    {
        return $this->searchDistributorsAsyncWithHttpInfo($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df, $with_children_distributor)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchDistributorsAsyncWithHttpInfo
     *
     * Search distributors
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_distributor include the children distributor to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchDistributorsAsyncWithHttpInfo($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_distributor = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseSearchDistributor';
        $request = $this->searchDistributorsRequest($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df, $with_children_distributor);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchDistributors'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_distributor include the children distributor to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchDistributorsRequest($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_distributor = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling searchDistributors'
            );
        }
        // verify the required parameter 'q' is set
        if ($q === null || (is_array($q) && count($q) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $q when calling searchDistributors'
            );
        }
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling searchDistributors'
            );
        }
        // verify the required parameter 'rows' is set
        if ($rows === null || (is_array($rows) && count($rows) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rows when calling searchDistributors'
            );
        }

        $resourcePath = '/{distributorId}/search/distributor';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q, null);
        }
        // query params
        if (is_array($fq)) {
            $fq = ObjectSerializer::serializeCollection($fq, 'multi', true);
        }
        if ($fq !== null) {
            $queryParams['fq'] = ObjectSerializer::toQueryValue($fq, null);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start, 'int32');
        }
        // query params
        if ($rows !== null) {
            $queryParams['rows'] = ObjectSerializer::toQueryValue($rows, 'int32');
        }
        // query params
        if ($fl !== null) {
            $queryParams['fl'] = ObjectSerializer::toQueryValue($fl, null);
        }
        // query params
        if ($df !== null) {
            $queryParams['df'] = ObjectSerializer::toQueryValue($df, null);
        }
        // query params
        if ($with_children_distributor !== null) {
            $queryParams['withChildrenDistributor'] = ObjectSerializer::toQueryValue($with_children_distributor, null);
        }
        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchGroups
     *
     * Search Groups
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading elements to skip (required)
     * @param  int $rows Number of elements to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  bool $with_children_groups include the children groups to the response (optional)
     * @param  string[] $fq Filter query (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseListResponseGroupDetails
     */
    public function searchGroups($distributor_id, $q, $start, $rows, $request_id = null, $sort = null, $with_children_groups = null, $fq = null)
    {
        list($response) = $this->searchGroupsWithHttpInfo($distributor_id, $q, $start, $rows, $request_id, $sort, $with_children_groups, $fq);
        return $response;
    }

    /**
     * Operation searchGroupsWithHttpInfo
     *
     * Search Groups
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading elements to skip (required)
     * @param  int $rows Number of elements to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  bool $with_children_groups include the children groups to the response (optional)
     * @param  string[] $fq Filter query (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseListResponseGroupDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchGroupsWithHttpInfo($distributor_id, $q, $start, $rows, $request_id = null, $sort = null, $with_children_groups = null, $fq = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseGroupDetails';
        $request = $this->searchGroupsRequest($distributor_id, $q, $start, $rows, $request_id, $sort, $with_children_groups, $fq);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseListResponseGroupDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchGroupsAsync
     *
     * Search Groups
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading elements to skip (required)
     * @param  int $rows Number of elements to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  bool $with_children_groups include the children groups to the response (optional)
     * @param  string[] $fq Filter query (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchGroupsAsync($distributor_id, $q, $start, $rows, $request_id = null, $sort = null, $with_children_groups = null, $fq = null)
    {
        return $this->searchGroupsAsyncWithHttpInfo($distributor_id, $q, $start, $rows, $request_id, $sort, $with_children_groups, $fq)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchGroupsAsyncWithHttpInfo
     *
     * Search Groups
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading elements to skip (required)
     * @param  int $rows Number of elements to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  bool $with_children_groups include the children groups to the response (optional)
     * @param  string[] $fq Filter query (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchGroupsAsyncWithHttpInfo($distributor_id, $q, $start, $rows, $request_id = null, $sort = null, $with_children_groups = null, $fq = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseGroupDetails';
        $request = $this->searchGroupsRequest($distributor_id, $q, $start, $rows, $request_id, $sort, $with_children_groups, $fq);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchGroups'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading elements to skip (required)
     * @param  int $rows Number of elements to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  bool $with_children_groups include the children groups to the response (optional)
     * @param  string[] $fq Filter query (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchGroupsRequest($distributor_id, $q, $start, $rows, $request_id = null, $sort = null, $with_children_groups = null, $fq = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling searchGroups'
            );
        }
        // verify the required parameter 'q' is set
        if ($q === null || (is_array($q) && count($q) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $q when calling searchGroups'
            );
        }
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling searchGroups'
            );
        }
        // verify the required parameter 'rows' is set
        if ($rows === null || (is_array($rows) && count($rows) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rows when calling searchGroups'
            );
        }

        $resourcePath = '/{distributorId}/search/group';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q, null);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start, 'int32');
        }
        // query params
        if ($rows !== null) {
            $queryParams['rows'] = ObjectSerializer::toQueryValue($rows, 'int32');
        }
        // query params
        if ($with_children_groups !== null) {
            $queryParams['withChildrenGroups'] = ObjectSerializer::toQueryValue($with_children_groups, null);
        }
        // query params
        if (is_array($fq)) {
            $fq = ObjectSerializer::serializeCollection($fq, 'multi', true);
        }
        if ($fq !== null) {
            $queryParams['fq'] = ObjectSerializer::toQueryValue($fq, null);
        }
        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchImis
     *
     * Search IMSIs
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $search_key Column to be search (optional)
     * @param  string $search_value Text to be search (optional)
     * @param  int $page The Page Number (optional, default to 0)
     * @param  int $page_size Size of the page (optional, default to 10)
     * @param  string $sort_by Sort field (optional, default to createEpochMilli)
     * @param  string $sort_order Sort order i.e. ASC|DESC (optional, default to DESC)
     * @param  int $whitelist_id Whitelist ID (optional)
     * @param  int $imsi_id_from IMSI value From (optional)
     * @param  int $imsi_id_to IMSI value To (optional)
     * @param  bool $with_children_imsis include the children IMSIs to the response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseListResponseImsiRecord
     */
    public function searchImis($distributor_id, $request_id = null, $search_key = null, $search_value = null, $page = '0', $page_size = '10', $sort_by = 'createEpochMilli', $sort_order = 'DESC', $whitelist_id = null, $imsi_id_from = null, $imsi_id_to = null, $with_children_imsis = null)
    {
        list($response) = $this->searchImisWithHttpInfo($distributor_id, $request_id, $search_key, $search_value, $page, $page_size, $sort_by, $sort_order, $whitelist_id, $imsi_id_from, $imsi_id_to, $with_children_imsis);
        return $response;
    }

    /**
     * Operation searchImisWithHttpInfo
     *
     * Search IMSIs
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $search_key Column to be search (optional)
     * @param  string $search_value Text to be search (optional)
     * @param  int $page The Page Number (optional, default to 0)
     * @param  int $page_size Size of the page (optional, default to 10)
     * @param  string $sort_by Sort field (optional, default to createEpochMilli)
     * @param  string $sort_order Sort order i.e. ASC|DESC (optional, default to DESC)
     * @param  int $whitelist_id Whitelist ID (optional)
     * @param  int $imsi_id_from IMSI value From (optional)
     * @param  int $imsi_id_to IMSI value To (optional)
     * @param  bool $with_children_imsis include the children IMSIs to the response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseListResponseImsiRecord, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchImisWithHttpInfo($distributor_id, $request_id = null, $search_key = null, $search_value = null, $page = '0', $page_size = '10', $sort_by = 'createEpochMilli', $sort_order = 'DESC', $whitelist_id = null, $imsi_id_from = null, $imsi_id_to = null, $with_children_imsis = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseImsiRecord';
        $request = $this->searchImisRequest($distributor_id, $request_id, $search_key, $search_value, $page, $page_size, $sort_by, $sort_order, $whitelist_id, $imsi_id_from, $imsi_id_to, $with_children_imsis);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseListResponseImsiRecord',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchImisAsync
     *
     * Search IMSIs
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $search_key Column to be search (optional)
     * @param  string $search_value Text to be search (optional)
     * @param  int $page The Page Number (optional, default to 0)
     * @param  int $page_size Size of the page (optional, default to 10)
     * @param  string $sort_by Sort field (optional, default to createEpochMilli)
     * @param  string $sort_order Sort order i.e. ASC|DESC (optional, default to DESC)
     * @param  int $whitelist_id Whitelist ID (optional)
     * @param  int $imsi_id_from IMSI value From (optional)
     * @param  int $imsi_id_to IMSI value To (optional)
     * @param  bool $with_children_imsis include the children IMSIs to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchImisAsync($distributor_id, $request_id = null, $search_key = null, $search_value = null, $page = '0', $page_size = '10', $sort_by = 'createEpochMilli', $sort_order = 'DESC', $whitelist_id = null, $imsi_id_from = null, $imsi_id_to = null, $with_children_imsis = null)
    {
        return $this->searchImisAsyncWithHttpInfo($distributor_id, $request_id, $search_key, $search_value, $page, $page_size, $sort_by, $sort_order, $whitelist_id, $imsi_id_from, $imsi_id_to, $with_children_imsis)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchImisAsyncWithHttpInfo
     *
     * Search IMSIs
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $search_key Column to be search (optional)
     * @param  string $search_value Text to be search (optional)
     * @param  int $page The Page Number (optional, default to 0)
     * @param  int $page_size Size of the page (optional, default to 10)
     * @param  string $sort_by Sort field (optional, default to createEpochMilli)
     * @param  string $sort_order Sort order i.e. ASC|DESC (optional, default to DESC)
     * @param  int $whitelist_id Whitelist ID (optional)
     * @param  int $imsi_id_from IMSI value From (optional)
     * @param  int $imsi_id_to IMSI value To (optional)
     * @param  bool $with_children_imsis include the children IMSIs to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchImisAsyncWithHttpInfo($distributor_id, $request_id = null, $search_key = null, $search_value = null, $page = '0', $page_size = '10', $sort_by = 'createEpochMilli', $sort_order = 'DESC', $whitelist_id = null, $imsi_id_from = null, $imsi_id_to = null, $with_children_imsis = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseImsiRecord';
        $request = $this->searchImisRequest($distributor_id, $request_id, $search_key, $search_value, $page, $page_size, $sort_by, $sort_order, $whitelist_id, $imsi_id_from, $imsi_id_to, $with_children_imsis);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchImis'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $search_key Column to be search (optional)
     * @param  string $search_value Text to be search (optional)
     * @param  int $page The Page Number (optional, default to 0)
     * @param  int $page_size Size of the page (optional, default to 10)
     * @param  string $sort_by Sort field (optional, default to createEpochMilli)
     * @param  string $sort_order Sort order i.e. ASC|DESC (optional, default to DESC)
     * @param  int $whitelist_id Whitelist ID (optional)
     * @param  int $imsi_id_from IMSI value From (optional)
     * @param  int $imsi_id_to IMSI value To (optional)
     * @param  bool $with_children_imsis include the children IMSIs to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchImisRequest($distributor_id, $request_id = null, $search_key = null, $search_value = null, $page = '0', $page_size = '10', $sort_by = 'createEpochMilli', $sort_order = 'DESC', $whitelist_id = null, $imsi_id_from = null, $imsi_id_to = null, $with_children_imsis = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling searchImis'
            );
        }

        $resourcePath = '/{distributorId}/search/imsis';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_key !== null) {
            $queryParams['searchKey'] = ObjectSerializer::toQueryValue($search_key, null);
        }
        // query params
        if ($search_value !== null) {
            $queryParams['searchValue'] = ObjectSerializer::toQueryValue($search_value, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by, null);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sort_order, null);
        }
        // query params
        if ($whitelist_id !== null) {
            $queryParams['whitelistId'] = ObjectSerializer::toQueryValue($whitelist_id, 'int32');
        }
        // query params
        if ($imsi_id_from !== null) {
            $queryParams['imsiIdFrom'] = ObjectSerializer::toQueryValue($imsi_id_from, 'int64');
        }
        // query params
        if ($imsi_id_to !== null) {
            $queryParams['imsiIdTo'] = ObjectSerializer::toQueryValue($imsi_id_to, 'int64');
        }
        // query params
        if ($with_children_imsis !== null) {
            $queryParams['withChildrenImsis'] = ObjectSerializer::toQueryValue($with_children_imsis, null);
        }
        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchImsiSlotProfiles
     *
     * Get IMSI Slot Profile entries
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseListResponseSearchImsiSlotProfiles
     */
    public function searchImsiSlotProfiles($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null)
    {
        list($response) = $this->searchImsiSlotProfilesWithHttpInfo($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df);
        return $response;
    }

    /**
     * Operation searchImsiSlotProfilesWithHttpInfo
     *
     * Get IMSI Slot Profile entries
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseListResponseSearchImsiSlotProfiles, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchImsiSlotProfilesWithHttpInfo($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseSearchImsiSlotProfiles';
        $request = $this->searchImsiSlotProfilesRequest($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseListResponseSearchImsiSlotProfiles',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchImsiSlotProfilesAsync
     *
     * Get IMSI Slot Profile entries
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchImsiSlotProfilesAsync($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null)
    {
        return $this->searchImsiSlotProfilesAsyncWithHttpInfo($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchImsiSlotProfilesAsyncWithHttpInfo
     *
     * Get IMSI Slot Profile entries
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchImsiSlotProfilesAsyncWithHttpInfo($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseSearchImsiSlotProfiles';
        $request = $this->searchImsiSlotProfilesRequest($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchImsiSlotProfiles'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchImsiSlotProfilesRequest($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling searchImsiSlotProfiles'
            );
        }
        // verify the required parameter 'q' is set
        if ($q === null || (is_array($q) && count($q) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $q when calling searchImsiSlotProfiles'
            );
        }
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling searchImsiSlotProfiles'
            );
        }
        // verify the required parameter 'rows' is set
        if ($rows === null || (is_array($rows) && count($rows) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rows when calling searchImsiSlotProfiles'
            );
        }

        $resourcePath = '/{distributorId}/search/imsi-slot-profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q, null);
        }
        // query params
        if (is_array($fq)) {
            $fq = ObjectSerializer::serializeCollection($fq, 'multi', true);
        }
        if ($fq !== null) {
            $queryParams['fq'] = ObjectSerializer::toQueryValue($fq, null);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start, 'int32');
        }
        // query params
        if ($rows !== null) {
            $queryParams['rows'] = ObjectSerializer::toQueryValue($rows, 'int32');
        }
        // query params
        if ($fl !== null) {
            $queryParams['fl'] = ObjectSerializer::toQueryValue($fl, null);
        }
        // query params
        if ($df !== null) {
            $queryParams['df'] = ObjectSerializer::toQueryValue($df, null);
        }
        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchInventories
     *
     * Search inventories
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_inventory include the children inventories to the response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseListResponseSearchInventory
     */
    public function searchInventories($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_inventory = null)
    {
        list($response) = $this->searchInventoriesWithHttpInfo($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df, $with_children_inventory);
        return $response;
    }

    /**
     * Operation searchInventoriesWithHttpInfo
     *
     * Search inventories
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_inventory include the children inventories to the response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseListResponseSearchInventory, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchInventoriesWithHttpInfo($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_inventory = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseSearchInventory';
        $request = $this->searchInventoriesRequest($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df, $with_children_inventory);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseListResponseSearchInventory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchInventoriesAsync
     *
     * Search inventories
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_inventory include the children inventories to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchInventoriesAsync($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_inventory = null)
    {
        return $this->searchInventoriesAsyncWithHttpInfo($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df, $with_children_inventory)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchInventoriesAsyncWithHttpInfo
     *
     * Search inventories
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_inventory include the children inventories to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchInventoriesAsyncWithHttpInfo($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_inventory = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseSearchInventory';
        $request = $this->searchInventoriesRequest($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df, $with_children_inventory);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchInventories'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_inventory include the children inventories to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchInventoriesRequest($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_inventory = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling searchInventories'
            );
        }
        // verify the required parameter 'q' is set
        if ($q === null || (is_array($q) && count($q) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $q when calling searchInventories'
            );
        }
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling searchInventories'
            );
        }
        // verify the required parameter 'rows' is set
        if ($rows === null || (is_array($rows) && count($rows) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rows when calling searchInventories'
            );
        }

        $resourcePath = '/{distributorId}/search/inventory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q, null);
        }
        // query params
        if (is_array($fq)) {
            $fq = ObjectSerializer::serializeCollection($fq, 'multi', true);
        }
        if ($fq !== null) {
            $queryParams['fq'] = ObjectSerializer::toQueryValue($fq, null);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start, 'int32');
        }
        // query params
        if ($rows !== null) {
            $queryParams['rows'] = ObjectSerializer::toQueryValue($rows, 'int32');
        }
        // query params
        if ($fl !== null) {
            $queryParams['fl'] = ObjectSerializer::toQueryValue($fl, null);
        }
        // query params
        if ($df !== null) {
            $queryParams['df'] = ObjectSerializer::toQueryValue($df, null);
        }
        // query params
        if ($with_children_inventory !== null) {
            $queryParams['withChildrenInventory'] = ObjectSerializer::toQueryValue($with_children_inventory, null);
        }
        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchLu
     *
     * Search Location Updates
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $q The query string (optional, default to *:*)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  int $start Number of leading records to skip (optional, default to 0)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (optional, default to 10)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_lu include the children location updates to the response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseListResponseLocationUpdate
     */
    public function searchLu($distributor_id, $request_id = null, $q = '*:*', $fq = null, $sort = null, $start = '0', $rows = '10', $fl = null, $df = null, $with_children_lu = null)
    {
        list($response) = $this->searchLuWithHttpInfo($distributor_id, $request_id, $q, $fq, $sort, $start, $rows, $fl, $df, $with_children_lu);
        return $response;
    }

    /**
     * Operation searchLuWithHttpInfo
     *
     * Search Location Updates
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $q The query string (optional, default to *:*)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  int $start Number of leading records to skip (optional, default to 0)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (optional, default to 10)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_lu include the children location updates to the response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseListResponseLocationUpdate, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchLuWithHttpInfo($distributor_id, $request_id = null, $q = '*:*', $fq = null, $sort = null, $start = '0', $rows = '10', $fl = null, $df = null, $with_children_lu = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseLocationUpdate';
        $request = $this->searchLuRequest($distributor_id, $request_id, $q, $fq, $sort, $start, $rows, $fl, $df, $with_children_lu);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseListResponseLocationUpdate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchLuAsync
     *
     * Search Location Updates
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $q The query string (optional, default to *:*)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  int $start Number of leading records to skip (optional, default to 0)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (optional, default to 10)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_lu include the children location updates to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchLuAsync($distributor_id, $request_id = null, $q = '*:*', $fq = null, $sort = null, $start = '0', $rows = '10', $fl = null, $df = null, $with_children_lu = null)
    {
        return $this->searchLuAsyncWithHttpInfo($distributor_id, $request_id, $q, $fq, $sort, $start, $rows, $fl, $df, $with_children_lu)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchLuAsyncWithHttpInfo
     *
     * Search Location Updates
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $q The query string (optional, default to *:*)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  int $start Number of leading records to skip (optional, default to 0)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (optional, default to 10)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_lu include the children location updates to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchLuAsyncWithHttpInfo($distributor_id, $request_id = null, $q = '*:*', $fq = null, $sort = null, $start = '0', $rows = '10', $fl = null, $df = null, $with_children_lu = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseLocationUpdate';
        $request = $this->searchLuRequest($distributor_id, $request_id, $q, $fq, $sort, $start, $rows, $fl, $df, $with_children_lu);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchLu'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $q The query string (optional, default to *:*)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  int $start Number of leading records to skip (optional, default to 0)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (optional, default to 10)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_lu include the children location updates to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchLuRequest($distributor_id, $request_id = null, $q = '*:*', $fq = null, $sort = null, $start = '0', $rows = '10', $fl = null, $df = null, $with_children_lu = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling searchLu'
            );
        }

        $resourcePath = '/{distributorId}/search/lu';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q, null);
        }
        // query params
        if (is_array($fq)) {
            $fq = ObjectSerializer::serializeCollection($fq, 'multi', true);
        }
        if ($fq !== null) {
            $queryParams['fq'] = ObjectSerializer::toQueryValue($fq, null);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start, 'int32');
        }
        // query params
        if ($rows !== null) {
            $queryParams['rows'] = ObjectSerializer::toQueryValue($rows, 'int32');
        }
        // query params
        if ($fl !== null) {
            $queryParams['fl'] = ObjectSerializer::toQueryValue($fl, null);
        }
        // query params
        if ($df !== null) {
            $queryParams['df'] = ObjectSerializer::toQueryValue($df, null);
        }
        // query params
        if ($with_children_lu !== null) {
            $queryParams['withChildrenLu'] = ObjectSerializer::toQueryValue($with_children_lu, null);
        }
        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchPackageTypes
     *
     * Search package types
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_package_type include the children package type to the response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseListResponseSearchPackageType
     */
    public function searchPackageTypes($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_package_type = null)
    {
        list($response) = $this->searchPackageTypesWithHttpInfo($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df, $with_children_package_type);
        return $response;
    }

    /**
     * Operation searchPackageTypesWithHttpInfo
     *
     * Search package types
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_package_type include the children package type to the response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseListResponseSearchPackageType, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchPackageTypesWithHttpInfo($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_package_type = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseSearchPackageType';
        $request = $this->searchPackageTypesRequest($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df, $with_children_package_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseListResponseSearchPackageType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchPackageTypesAsync
     *
     * Search package types
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_package_type include the children package type to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchPackageTypesAsync($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_package_type = null)
    {
        return $this->searchPackageTypesAsyncWithHttpInfo($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df, $with_children_package_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchPackageTypesAsyncWithHttpInfo
     *
     * Search package types
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_package_type include the children package type to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchPackageTypesAsyncWithHttpInfo($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_package_type = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseSearchPackageType';
        $request = $this->searchPackageTypesRequest($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df, $with_children_package_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchPackageTypes'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_package_type include the children package type to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchPackageTypesRequest($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_package_type = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling searchPackageTypes'
            );
        }
        // verify the required parameter 'q' is set
        if ($q === null || (is_array($q) && count($q) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $q when calling searchPackageTypes'
            );
        }
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling searchPackageTypes'
            );
        }
        // verify the required parameter 'rows' is set
        if ($rows === null || (is_array($rows) && count($rows) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rows when calling searchPackageTypes'
            );
        }

        $resourcePath = '/{distributorId}/search/packageType';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q, null);
        }
        // query params
        if (is_array($fq)) {
            $fq = ObjectSerializer::serializeCollection($fq, 'multi', true);
        }
        if ($fq !== null) {
            $queryParams['fq'] = ObjectSerializer::toQueryValue($fq, null);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start, 'int32');
        }
        // query params
        if ($rows !== null) {
            $queryParams['rows'] = ObjectSerializer::toQueryValue($rows, 'int32');
        }
        // query params
        if ($fl !== null) {
            $queryParams['fl'] = ObjectSerializer::toQueryValue($fl, null);
        }
        // query params
        if ($df !== null) {
            $queryParams['df'] = ObjectSerializer::toQueryValue($df, null);
        }
        // query params
        if ($with_children_package_type !== null) {
            $queryParams['withChildrenPackageType'] = ObjectSerializer::toQueryValue($with_children_package_type, null);
        }
        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchPackages
     *
     * Search packages
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_packages include the children packages to the response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseListResponseSearchPackage
     */
    public function searchPackages($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_packages = null)
    {
        list($response) = $this->searchPackagesWithHttpInfo($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df, $with_children_packages);
        return $response;
    }

    /**
     * Operation searchPackagesWithHttpInfo
     *
     * Search packages
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_packages include the children packages to the response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseListResponseSearchPackage, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchPackagesWithHttpInfo($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_packages = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseSearchPackage';
        $request = $this->searchPackagesRequest($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df, $with_children_packages);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseListResponseSearchPackage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchPackagesAsync
     *
     * Search packages
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_packages include the children packages to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchPackagesAsync($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_packages = null)
    {
        return $this->searchPackagesAsyncWithHttpInfo($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df, $with_children_packages)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchPackagesAsyncWithHttpInfo
     *
     * Search packages
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_packages include the children packages to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchPackagesAsyncWithHttpInfo($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_packages = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseSearchPackage';
        $request = $this->searchPackagesRequest($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df, $with_children_packages);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchPackages'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_packages include the children packages to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchPackagesRequest($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_packages = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling searchPackages'
            );
        }
        // verify the required parameter 'q' is set
        if ($q === null || (is_array($q) && count($q) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $q when calling searchPackages'
            );
        }
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling searchPackages'
            );
        }
        // verify the required parameter 'rows' is set
        if ($rows === null || (is_array($rows) && count($rows) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rows when calling searchPackages'
            );
        }

        $resourcePath = '/{distributorId}/search/package';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q, null);
        }
        // query params
        if (is_array($fq)) {
            $fq = ObjectSerializer::serializeCollection($fq, 'multi', true);
        }
        if ($fq !== null) {
            $queryParams['fq'] = ObjectSerializer::toQueryValue($fq, null);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start, 'int32');
        }
        // query params
        if ($rows !== null) {
            $queryParams['rows'] = ObjectSerializer::toQueryValue($rows, 'int32');
        }
        // query params
        if ($fl !== null) {
            $queryParams['fl'] = ObjectSerializer::toQueryValue($fl, null);
        }
        // query params
        if ($df !== null) {
            $queryParams['df'] = ObjectSerializer::toQueryValue($df, null);
        }
        // query params
        if ($with_children_packages !== null) {
            $queryParams['withChildrenPackages'] = ObjectSerializer::toQueryValue($with_children_packages, null);
        }
        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchSims
     *
     * Search SIMs
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_sims include the children sims to the response (optional)
     * @param  bool $with_deactivated_sims include the deactivated sims to the response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseListResponseSearchSim
     */
    public function searchSims($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_sims = null, $with_deactivated_sims = null)
    {
        list($response) = $this->searchSimsWithHttpInfo($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df, $with_children_sims, $with_deactivated_sims);
        return $response;
    }

    /**
     * Operation searchSimsWithHttpInfo
     *
     * Search SIMs
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_sims include the children sims to the response (optional)
     * @param  bool $with_deactivated_sims include the deactivated sims to the response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseListResponseSearchSim, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchSimsWithHttpInfo($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_sims = null, $with_deactivated_sims = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseSearchSim';
        $request = $this->searchSimsRequest($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df, $with_children_sims, $with_deactivated_sims);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseListResponseSearchSim',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchSimsAsync
     *
     * Search SIMs
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_sims include the children sims to the response (optional)
     * @param  bool $with_deactivated_sims include the deactivated sims to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchSimsAsync($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_sims = null, $with_deactivated_sims = null)
    {
        return $this->searchSimsAsyncWithHttpInfo($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df, $with_children_sims, $with_deactivated_sims)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchSimsAsyncWithHttpInfo
     *
     * Search SIMs
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_sims include the children sims to the response (optional)
     * @param  bool $with_deactivated_sims include the deactivated sims to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchSimsAsyncWithHttpInfo($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_sims = null, $with_deactivated_sims = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseSearchSim';
        $request = $this->searchSimsRequest($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df, $with_children_sims, $with_deactivated_sims);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchSims'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_sims include the children sims to the response (optional)
     * @param  bool $with_deactivated_sims include the deactivated sims to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchSimsRequest($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_sims = null, $with_deactivated_sims = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling searchSims'
            );
        }
        // verify the required parameter 'q' is set
        if ($q === null || (is_array($q) && count($q) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $q when calling searchSims'
            );
        }
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling searchSims'
            );
        }
        // verify the required parameter 'rows' is set
        if ($rows === null || (is_array($rows) && count($rows) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rows when calling searchSims'
            );
        }

        $resourcePath = '/{distributorId}/search/sim';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q, null);
        }
        // query params
        if (is_array($fq)) {
            $fq = ObjectSerializer::serializeCollection($fq, 'multi', true);
        }
        if ($fq !== null) {
            $queryParams['fq'] = ObjectSerializer::toQueryValue($fq, null);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start, 'int32');
        }
        // query params
        if ($rows !== null) {
            $queryParams['rows'] = ObjectSerializer::toQueryValue($rows, 'int32');
        }
        // query params
        if ($fl !== null) {
            $queryParams['fl'] = ObjectSerializer::toQueryValue($fl, null);
        }
        // query params
        if ($df !== null) {
            $queryParams['df'] = ObjectSerializer::toQueryValue($df, null);
        }
        // query params
        if ($with_children_sims !== null) {
            $queryParams['withChildrenSims'] = ObjectSerializer::toQueryValue($with_children_sims, null);
        }
        // query params
        if ($with_deactivated_sims !== null) {
            $queryParams['withDeactivatedSims'] = ObjectSerializer::toQueryValue($with_deactivated_sims, null);
        }
        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchSmsCdr
     *
     * Search SMS CDRs
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $q The query string (optional, default to *:*)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  int $start Number of leading records to skip (optional, default to 0)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (optional, default to 10)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_sms_cdr include the children SMS CDR to the response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseListResponseSmsCdr
     */
    public function searchSmsCdr($distributor_id, $request_id = null, $q = '*:*', $fq = null, $sort = null, $start = '0', $rows = '10', $fl = null, $df = null, $with_children_sms_cdr = null)
    {
        list($response) = $this->searchSmsCdrWithHttpInfo($distributor_id, $request_id, $q, $fq, $sort, $start, $rows, $fl, $df, $with_children_sms_cdr);
        return $response;
    }

    /**
     * Operation searchSmsCdrWithHttpInfo
     *
     * Search SMS CDRs
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $q The query string (optional, default to *:*)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  int $start Number of leading records to skip (optional, default to 0)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (optional, default to 10)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_sms_cdr include the children SMS CDR to the response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseListResponseSmsCdr, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchSmsCdrWithHttpInfo($distributor_id, $request_id = null, $q = '*:*', $fq = null, $sort = null, $start = '0', $rows = '10', $fl = null, $df = null, $with_children_sms_cdr = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseSmsCdr';
        $request = $this->searchSmsCdrRequest($distributor_id, $request_id, $q, $fq, $sort, $start, $rows, $fl, $df, $with_children_sms_cdr);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseListResponseSmsCdr',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchSmsCdrAsync
     *
     * Search SMS CDRs
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $q The query string (optional, default to *:*)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  int $start Number of leading records to skip (optional, default to 0)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (optional, default to 10)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_sms_cdr include the children SMS CDR to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchSmsCdrAsync($distributor_id, $request_id = null, $q = '*:*', $fq = null, $sort = null, $start = '0', $rows = '10', $fl = null, $df = null, $with_children_sms_cdr = null)
    {
        return $this->searchSmsCdrAsyncWithHttpInfo($distributor_id, $request_id, $q, $fq, $sort, $start, $rows, $fl, $df, $with_children_sms_cdr)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchSmsCdrAsyncWithHttpInfo
     *
     * Search SMS CDRs
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $q The query string (optional, default to *:*)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  int $start Number of leading records to skip (optional, default to 0)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (optional, default to 10)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_sms_cdr include the children SMS CDR to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchSmsCdrAsyncWithHttpInfo($distributor_id, $request_id = null, $q = '*:*', $fq = null, $sort = null, $start = '0', $rows = '10', $fl = null, $df = null, $with_children_sms_cdr = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseSmsCdr';
        $request = $this->searchSmsCdrRequest($distributor_id, $request_id, $q, $fq, $sort, $start, $rows, $fl, $df, $with_children_sms_cdr);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchSmsCdr'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $q The query string (optional, default to *:*)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  int $start Number of leading records to skip (optional, default to 0)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (optional, default to 10)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_sms_cdr include the children SMS CDR to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchSmsCdrRequest($distributor_id, $request_id = null, $q = '*:*', $fq = null, $sort = null, $start = '0', $rows = '10', $fl = null, $df = null, $with_children_sms_cdr = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling searchSmsCdr'
            );
        }

        $resourcePath = '/{distributorId}/search/cdr/sms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q, null);
        }
        // query params
        if (is_array($fq)) {
            $fq = ObjectSerializer::serializeCollection($fq, 'multi', true);
        }
        if ($fq !== null) {
            $queryParams['fq'] = ObjectSerializer::toQueryValue($fq, null);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start, 'int32');
        }
        // query params
        if ($rows !== null) {
            $queryParams['rows'] = ObjectSerializer::toQueryValue($rows, 'int32');
        }
        // query params
        if ($fl !== null) {
            $queryParams['fl'] = ObjectSerializer::toQueryValue($fl, null);
        }
        // query params
        if ($df !== null) {
            $queryParams['df'] = ObjectSerializer::toQueryValue($df, null);
        }
        // query params
        if ($with_children_sms_cdr !== null) {
            $queryParams['withChildrenSmsCdr'] = ObjectSerializer::toQueryValue($with_children_sms_cdr, null);
        }
        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchTrafficPolicies
     *
     * Search traffic policies
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseListResponseSearchTrafficPolicy
     */
    public function searchTrafficPolicies($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null)
    {
        list($response) = $this->searchTrafficPoliciesWithHttpInfo($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df);
        return $response;
    }

    /**
     * Operation searchTrafficPoliciesWithHttpInfo
     *
     * Search traffic policies
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseListResponseSearchTrafficPolicy, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchTrafficPoliciesWithHttpInfo($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseSearchTrafficPolicy';
        $request = $this->searchTrafficPoliciesRequest($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseListResponseSearchTrafficPolicy',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchTrafficPoliciesAsync
     *
     * Search traffic policies
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTrafficPoliciesAsync($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null)
    {
        return $this->searchTrafficPoliciesAsyncWithHttpInfo($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchTrafficPoliciesAsyncWithHttpInfo
     *
     * Search traffic policies
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTrafficPoliciesAsyncWithHttpInfo($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseSearchTrafficPolicy';
        $request = $this->searchTrafficPoliciesRequest($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchTrafficPolicies'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchTrafficPoliciesRequest($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling searchTrafficPolicies'
            );
        }
        // verify the required parameter 'q' is set
        if ($q === null || (is_array($q) && count($q) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $q when calling searchTrafficPolicies'
            );
        }
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling searchTrafficPolicies'
            );
        }
        // verify the required parameter 'rows' is set
        if ($rows === null || (is_array($rows) && count($rows) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rows when calling searchTrafficPolicies'
            );
        }

        $resourcePath = '/{distributorId}/search/trafficPolicy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q, null);
        }
        // query params
        if (is_array($fq)) {
            $fq = ObjectSerializer::serializeCollection($fq, 'multi', true);
        }
        if ($fq !== null) {
            $queryParams['fq'] = ObjectSerializer::toQueryValue($fq, null);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start, 'int32');
        }
        // query params
        if ($rows !== null) {
            $queryParams['rows'] = ObjectSerializer::toQueryValue($rows, 'int32');
        }
        // query params
        if ($fl !== null) {
            $queryParams['fl'] = ObjectSerializer::toQueryValue($fl, null);
        }
        // query params
        if ($df !== null) {
            $queryParams['df'] = ObjectSerializer::toQueryValue($df, null);
        }
        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchVoiceCdr
     *
     * Search Voice CDRs
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $q The query string (optional, default to *:*)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  int $start Number of leading records to skip (optional, default to 0)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (optional, default to 10)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_voice_cdr include the children voice CDR to the response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseListResponseVoiceCdr
     */
    public function searchVoiceCdr($distributor_id, $request_id = null, $q = '*:*', $fq = null, $sort = null, $start = '0', $rows = '10', $fl = null, $df = null, $with_children_voice_cdr = null)
    {
        list($response) = $this->searchVoiceCdrWithHttpInfo($distributor_id, $request_id, $q, $fq, $sort, $start, $rows, $fl, $df, $with_children_voice_cdr);
        return $response;
    }

    /**
     * Operation searchVoiceCdrWithHttpInfo
     *
     * Search Voice CDRs
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $q The query string (optional, default to *:*)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  int $start Number of leading records to skip (optional, default to 0)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (optional, default to 10)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_voice_cdr include the children voice CDR to the response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseListResponseVoiceCdr, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchVoiceCdrWithHttpInfo($distributor_id, $request_id = null, $q = '*:*', $fq = null, $sort = null, $start = '0', $rows = '10', $fl = null, $df = null, $with_children_voice_cdr = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseVoiceCdr';
        $request = $this->searchVoiceCdrRequest($distributor_id, $request_id, $q, $fq, $sort, $start, $rows, $fl, $df, $with_children_voice_cdr);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseListResponseVoiceCdr',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchVoiceCdrAsync
     *
     * Search Voice CDRs
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $q The query string (optional, default to *:*)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  int $start Number of leading records to skip (optional, default to 0)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (optional, default to 10)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_voice_cdr include the children voice CDR to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchVoiceCdrAsync($distributor_id, $request_id = null, $q = '*:*', $fq = null, $sort = null, $start = '0', $rows = '10', $fl = null, $df = null, $with_children_voice_cdr = null)
    {
        return $this->searchVoiceCdrAsyncWithHttpInfo($distributor_id, $request_id, $q, $fq, $sort, $start, $rows, $fl, $df, $with_children_voice_cdr)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchVoiceCdrAsyncWithHttpInfo
     *
     * Search Voice CDRs
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $q The query string (optional, default to *:*)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  int $start Number of leading records to skip (optional, default to 0)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (optional, default to 10)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_voice_cdr include the children voice CDR to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchVoiceCdrAsyncWithHttpInfo($distributor_id, $request_id = null, $q = '*:*', $fq = null, $sort = null, $start = '0', $rows = '10', $fl = null, $df = null, $with_children_voice_cdr = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseVoiceCdr';
        $request = $this->searchVoiceCdrRequest($distributor_id, $request_id, $q, $fq, $sort, $start, $rows, $fl, $df, $with_children_voice_cdr);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchVoiceCdr'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string $q The query string (optional, default to *:*)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  int $start Number of leading records to skip (optional, default to 0)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (optional, default to 10)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_voice_cdr include the children voice CDR to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchVoiceCdrRequest($distributor_id, $request_id = null, $q = '*:*', $fq = null, $sort = null, $start = '0', $rows = '10', $fl = null, $df = null, $with_children_voice_cdr = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling searchVoiceCdr'
            );
        }

        $resourcePath = '/{distributorId}/search/cdr/voice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q, null);
        }
        // query params
        if (is_array($fq)) {
            $fq = ObjectSerializer::serializeCollection($fq, 'multi', true);
        }
        if ($fq !== null) {
            $queryParams['fq'] = ObjectSerializer::toQueryValue($fq, null);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start, 'int32');
        }
        // query params
        if ($rows !== null) {
            $queryParams['rows'] = ObjectSerializer::toQueryValue($rows, 'int32');
        }
        // query params
        if ($fl !== null) {
            $queryParams['fl'] = ObjectSerializer::toQueryValue($fl, null);
        }
        // query params
        if ($df !== null) {
            $queryParams['df'] = ObjectSerializer::toQueryValue($df, null);
        }
        // query params
        if ($with_children_voice_cdr !== null) {
            $queryParams['withChildrenVoiceCdr'] = ObjectSerializer::toQueryValue($with_children_voice_cdr, null);
        }
        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchWhitelistEntries
     *
     * Get whitelist entries
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseListResponseWhitelistEntry
     */
    public function searchWhitelistEntries($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null)
    {
        list($response) = $this->searchWhitelistEntriesWithHttpInfo($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df);
        return $response;
    }

    /**
     * Operation searchWhitelistEntriesWithHttpInfo
     *
     * Get whitelist entries
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseListResponseWhitelistEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchWhitelistEntriesWithHttpInfo($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseWhitelistEntry';
        $request = $this->searchWhitelistEntriesRequest($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseListResponseWhitelistEntry',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchWhitelistEntriesAsync
     *
     * Get whitelist entries
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchWhitelistEntriesAsync($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null)
    {
        return $this->searchWhitelistEntriesAsyncWithHttpInfo($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchWhitelistEntriesAsyncWithHttpInfo
     *
     * Get whitelist entries
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchWhitelistEntriesAsyncWithHttpInfo($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseWhitelistEntry';
        $request = $this->searchWhitelistEntriesRequest($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchWhitelistEntries'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchWhitelistEntriesRequest($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling searchWhitelistEntries'
            );
        }
        // verify the required parameter 'q' is set
        if ($q === null || (is_array($q) && count($q) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $q when calling searchWhitelistEntries'
            );
        }
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling searchWhitelistEntries'
            );
        }
        // verify the required parameter 'rows' is set
        if ($rows === null || (is_array($rows) && count($rows) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rows when calling searchWhitelistEntries'
            );
        }

        $resourcePath = '/{distributorId}/search/whitelistEntry';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q, null);
        }
        // query params
        if (is_array($fq)) {
            $fq = ObjectSerializer::serializeCollection($fq, 'multi', true);
        }
        if ($fq !== null) {
            $queryParams['fq'] = ObjectSerializer::toQueryValue($fq, null);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start, 'int32');
        }
        // query params
        if ($rows !== null) {
            $queryParams['rows'] = ObjectSerializer::toQueryValue($rows, 'int32');
        }
        // query params
        if ($fl !== null) {
            $queryParams['fl'] = ObjectSerializer::toQueryValue($fl, null);
        }
        // query params
        if ($df !== null) {
            $queryParams['df'] = ObjectSerializer::toQueryValue($df, null);
        }
        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchWhitelists
     *
     * Search whitelists
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_whitelist include the children whitelists to the response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseListResponseSearchWhitelist
     */
    public function searchWhitelists($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_whitelist = null)
    {
        list($response) = $this->searchWhitelistsWithHttpInfo($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df, $with_children_whitelist);
        return $response;
    }

    /**
     * Operation searchWhitelistsWithHttpInfo
     *
     * Search whitelists
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_whitelist include the children whitelists to the response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseListResponseSearchWhitelist, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchWhitelistsWithHttpInfo($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_whitelist = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseSearchWhitelist';
        $request = $this->searchWhitelistsRequest($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df, $with_children_whitelist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseListResponseSearchWhitelist',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchWhitelistsAsync
     *
     * Search whitelists
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_whitelist include the children whitelists to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchWhitelistsAsync($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_whitelist = null)
    {
        return $this->searchWhitelistsAsyncWithHttpInfo($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df, $with_children_whitelist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchWhitelistsAsyncWithHttpInfo
     *
     * Search whitelists
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_whitelist include the children whitelists to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchWhitelistsAsyncWithHttpInfo($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_whitelist = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponseSearchWhitelist';
        $request = $this->searchWhitelistsRequest($distributor_id, $q, $start, $rows, $request_id, $fq, $sort, $fl, $df, $with_children_whitelist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchWhitelists'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $q The query string (required)
     * @param  int $start Number of leading records to skip (required)
     * @param  int $rows Number of records to return after &#x27;start&#x27; (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $fq Filter query (optional)
     * @param  string $sort Sort field or function with asc|desc (optional)
     * @param  string $fl Field list, comma separated (optional)
     * @param  string $df Default search field (optional)
     * @param  bool $with_children_whitelist include the children whitelists to the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchWhitelistsRequest($distributor_id, $q, $start, $rows, $request_id = null, $fq = null, $sort = null, $fl = null, $df = null, $with_children_whitelist = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling searchWhitelists'
            );
        }
        // verify the required parameter 'q' is set
        if ($q === null || (is_array($q) && count($q) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $q when calling searchWhitelists'
            );
        }
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling searchWhitelists'
            );
        }
        // verify the required parameter 'rows' is set
        if ($rows === null || (is_array($rows) && count($rows) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rows when calling searchWhitelists'
            );
        }

        $resourcePath = '/{distributorId}/search/whitelist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q, null);
        }
        // query params
        if (is_array($fq)) {
            $fq = ObjectSerializer::serializeCollection($fq, 'multi', true);
        }
        if ($fq !== null) {
            $queryParams['fq'] = ObjectSerializer::toQueryValue($fq, null);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start, 'int32');
        }
        // query params
        if ($rows !== null) {
            $queryParams['rows'] = ObjectSerializer::toQueryValue($rows, 'int32');
        }
        // query params
        if ($fl !== null) {
            $queryParams['fl'] = ObjectSerializer::toQueryValue($fl, null);
        }
        // query params
        if ($df !== null) {
            $queryParams['df'] = ObjectSerializer::toQueryValue($df, null);
        }
        // query params
        if ($with_children_whitelist !== null) {
            $queryParams['withChildrenWhitelist'] = ObjectSerializer::toQueryValue($with_children_whitelist, null);
        }
        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
