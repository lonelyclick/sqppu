<?php
/**
 * SIMApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Distributor PPU Service
 *
 * Â© KnowRoaming LTD 2017
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SIMApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SIMApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation adjustSimBalance
     *
     * Adjust the balance of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestAdjustBalance $body body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adjustSimBalance($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $this->adjustSimBalanceWithHttpInfo($distributor_id, $iccid, $body, $request_id);
    }

    /**
     * Operation adjustSimBalanceWithHttpInfo
     *
     * Adjust the balance of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestAdjustBalance $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adjustSimBalanceWithHttpInfo($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $returnType = '';
        $request = $this->adjustSimBalanceRequest($distributor_id, $iccid, $body, $request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adjustSimBalanceAsync
     *
     * Adjust the balance of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestAdjustBalance $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustSimBalanceAsync($distributor_id, $iccid, $body = null, $request_id = null)
    {
        return $this->adjustSimBalanceAsyncWithHttpInfo($distributor_id, $iccid, $body, $request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adjustSimBalanceAsyncWithHttpInfo
     *
     * Adjust the balance of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestAdjustBalance $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustSimBalanceAsyncWithHttpInfo($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $returnType = '';
        $request = $this->adjustSimBalanceRequest($distributor_id, $iccid, $body, $request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adjustSimBalance'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestAdjustBalance $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adjustSimBalanceRequest($distributor_id, $iccid, $body = null, $request_id = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling adjustSimBalance'
            );
        }
        // verify the required parameter 'iccid' is set
        if ($iccid === null || (is_array($iccid) && count($iccid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iccid when calling adjustSimBalance'
            );
        }

        $resourcePath = '/{distributorId}/sim/{iccid}/adjustBalance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }
        // path params
        if ($iccid !== null) {
            $resourcePath = str_replace(
                '{' . 'iccid' . '}',
                ObjectSerializer::toPathValue($iccid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelSimLocationUpdate
     *
     * Cancel SIM location update
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelSimLocationUpdate($distributor_id, $iccid, $request_id = null)
    {
        $this->cancelSimLocationUpdateWithHttpInfo($distributor_id, $iccid, $request_id);
    }

    /**
     * Operation cancelSimLocationUpdateWithHttpInfo
     *
     * Cancel SIM location update
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelSimLocationUpdateWithHttpInfo($distributor_id, $iccid, $request_id = null)
    {
        $returnType = '';
        $request = $this->cancelSimLocationUpdateRequest($distributor_id, $iccid, $request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelSimLocationUpdateAsync
     *
     * Cancel SIM location update
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelSimLocationUpdateAsync($distributor_id, $iccid, $request_id = null)
    {
        return $this->cancelSimLocationUpdateAsyncWithHttpInfo($distributor_id, $iccid, $request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelSimLocationUpdateAsyncWithHttpInfo
     *
     * Cancel SIM location update
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelSimLocationUpdateAsyncWithHttpInfo($distributor_id, $iccid, $request_id = null)
    {
        $returnType = '';
        $request = $this->cancelSimLocationUpdateRequest($distributor_id, $iccid, $request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelSimLocationUpdate'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelSimLocationUpdateRequest($distributor_id, $iccid, $request_id = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling cancelSimLocationUpdate'
            );
        }
        // verify the required parameter 'iccid' is set
        if ($iccid === null || (is_array($iccid) && count($iccid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iccid when calling cancelSimLocationUpdate'
            );
        }

        $resourcePath = '/{distributorId}/sim/{iccid}/cancelLocationUpdate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }
        // path params
        if ($iccid !== null) {
            $resourcePath = str_replace(
                '{' . 'iccid' . '}',
                ObjectSerializer::toPathValue($iccid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSimPackage
     *
     * Add a package to a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestCreatePackage $body body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponsePackage
     */
    public function createSimPackage($distributor_id, $iccid, $body = null, $request_id = null)
    {
        list($response) = $this->createSimPackageWithHttpInfo($distributor_id, $iccid, $body, $request_id);
        return $response;
    }

    /**
     * Operation createSimPackageWithHttpInfo
     *
     * Add a package to a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestCreatePackage $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponsePackage, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSimPackageWithHttpInfo($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResponsePackage';
        $request = $this->createSimPackageRequest($distributor_id, $iccid, $body, $request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponsePackage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSimPackageAsync
     *
     * Add a package to a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestCreatePackage $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSimPackageAsync($distributor_id, $iccid, $body = null, $request_id = null)
    {
        return $this->createSimPackageAsyncWithHttpInfo($distributor_id, $iccid, $body, $request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSimPackageAsyncWithHttpInfo
     *
     * Add a package to a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestCreatePackage $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSimPackageAsyncWithHttpInfo($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResponsePackage';
        $request = $this->createSimPackageRequest($distributor_id, $iccid, $body, $request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSimPackage'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestCreatePackage $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSimPackageRequest($distributor_id, $iccid, $body = null, $request_id = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling createSimPackage'
            );
        }
        // verify the required parameter 'iccid' is set
        if ($iccid === null || (is_array($iccid) && count($iccid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iccid when calling createSimPackage'
            );
        }

        $resourcePath = '/{distributorId}/sim/{iccid}/addPackage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }
        // path params
        if ($iccid !== null) {
            $resourcePath = str_replace(
                '{' . 'iccid' . '}',
                ObjectSerializer::toPathValue($iccid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRoutingConfiguration
     *
     * Get the routing configuration
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseSimRouteConfiguration
     */
    public function getRoutingConfiguration($distributor_id, $iccid, $request_id = null)
    {
        list($response) = $this->getRoutingConfigurationWithHttpInfo($distributor_id, $iccid, $request_id);
        return $response;
    }

    /**
     * Operation getRoutingConfigurationWithHttpInfo
     *
     * Get the routing configuration
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseSimRouteConfiguration, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRoutingConfigurationWithHttpInfo($distributor_id, $iccid, $request_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseSimRouteConfiguration';
        $request = $this->getRoutingConfigurationRequest($distributor_id, $iccid, $request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseSimRouteConfiguration',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRoutingConfigurationAsync
     *
     * Get the routing configuration
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRoutingConfigurationAsync($distributor_id, $iccid, $request_id = null)
    {
        return $this->getRoutingConfigurationAsyncWithHttpInfo($distributor_id, $iccid, $request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRoutingConfigurationAsyncWithHttpInfo
     *
     * Get the routing configuration
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRoutingConfigurationAsyncWithHttpInfo($distributor_id, $iccid, $request_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseSimRouteConfiguration';
        $request = $this->getRoutingConfigurationRequest($distributor_id, $iccid, $request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRoutingConfiguration'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRoutingConfigurationRequest($distributor_id, $iccid, $request_id = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling getRoutingConfiguration'
            );
        }
        // verify the required parameter 'iccid' is set
        if ($iccid === null || (is_array($iccid) && count($iccid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iccid when calling getRoutingConfiguration'
            );
        }

        $resourcePath = '/{distributorId}/sim/{iccid}/routingConfiguration';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }
        // path params
        if ($iccid !== null) {
            $resourcePath = str_replace(
                '{' . 'iccid' . '}',
                ObjectSerializer::toPathValue($iccid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSim
     *
     * Get a SIM information
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseSim
     */
    public function getSim($distributor_id, $iccid, $request_id = null)
    {
        list($response) = $this->getSimWithHttpInfo($distributor_id, $iccid, $request_id);
        return $response;
    }

    /**
     * Operation getSimWithHttpInfo
     *
     * Get a SIM information
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseSim, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSimWithHttpInfo($distributor_id, $iccid, $request_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseSim';
        $request = $this->getSimRequest($distributor_id, $iccid, $request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseSim',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSimAsync
     *
     * Get a SIM information
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimAsync($distributor_id, $iccid, $request_id = null)
    {
        return $this->getSimAsyncWithHttpInfo($distributor_id, $iccid, $request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSimAsyncWithHttpInfo
     *
     * Get a SIM information
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimAsyncWithHttpInfo($distributor_id, $iccid, $request_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseSim';
        $request = $this->getSimRequest($distributor_id, $iccid, $request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSim'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSimRequest($distributor_id, $iccid, $request_id = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling getSim'
            );
        }
        // verify the required parameter 'iccid' is set
        if ($iccid === null || (is_array($iccid) && count($iccid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iccid when calling getSim'
            );
        }

        $resourcePath = '/{distributorId}/sim/{iccid}/info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }
        // path params
        if ($iccid !== null) {
            $resourcePath = str_replace(
                '{' . 'iccid' . '}',
                ObjectSerializer::toPathValue($iccid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSimBalance
     *
     * Get the balance of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseBalance
     */
    public function getSimBalance($distributor_id, $iccid, $request_id = null)
    {
        list($response) = $this->getSimBalanceWithHttpInfo($distributor_id, $iccid, $request_id);
        return $response;
    }

    /**
     * Operation getSimBalanceWithHttpInfo
     *
     * Get the balance of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseBalance, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSimBalanceWithHttpInfo($distributor_id, $iccid, $request_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseBalance';
        $request = $this->getSimBalanceRequest($distributor_id, $iccid, $request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseBalance',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSimBalanceAsync
     *
     * Get the balance of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimBalanceAsync($distributor_id, $iccid, $request_id = null)
    {
        return $this->getSimBalanceAsyncWithHttpInfo($distributor_id, $iccid, $request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSimBalanceAsyncWithHttpInfo
     *
     * Get the balance of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimBalanceAsyncWithHttpInfo($distributor_id, $iccid, $request_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseBalance';
        $request = $this->getSimBalanceRequest($distributor_id, $iccid, $request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSimBalance'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSimBalanceRequest($distributor_id, $iccid, $request_id = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling getSimBalance'
            );
        }
        // verify the required parameter 'iccid' is set
        if ($iccid === null || (is_array($iccid) && count($iccid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iccid when calling getSimBalance'
            );
        }

        $resourcePath = '/{distributorId}/sim/{iccid}/balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }
        // path params
        if ($iccid !== null) {
            $resourcePath = str_replace(
                '{' . 'iccid' . '}',
                ObjectSerializer::toPathValue($iccid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSimBalanceDrain
     *
     * Get the balance drain of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseBalanceDrain
     */
    public function getSimBalanceDrain($distributor_id, $iccid, $request_id = null)
    {
        list($response) = $this->getSimBalanceDrainWithHttpInfo($distributor_id, $iccid, $request_id);
        return $response;
    }

    /**
     * Operation getSimBalanceDrainWithHttpInfo
     *
     * Get the balance drain of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseBalanceDrain, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSimBalanceDrainWithHttpInfo($distributor_id, $iccid, $request_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseBalanceDrain';
        $request = $this->getSimBalanceDrainRequest($distributor_id, $iccid, $request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseBalanceDrain',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSimBalanceDrainAsync
     *
     * Get the balance drain of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimBalanceDrainAsync($distributor_id, $iccid, $request_id = null)
    {
        return $this->getSimBalanceDrainAsyncWithHttpInfo($distributor_id, $iccid, $request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSimBalanceDrainAsyncWithHttpInfo
     *
     * Get the balance drain of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimBalanceDrainAsyncWithHttpInfo($distributor_id, $iccid, $request_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseBalanceDrain';
        $request = $this->getSimBalanceDrainRequest($distributor_id, $iccid, $request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSimBalanceDrain'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSimBalanceDrainRequest($distributor_id, $iccid, $request_id = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling getSimBalanceDrain'
            );
        }
        // verify the required parameter 'iccid' is set
        if ($iccid === null || (is_array($iccid) && count($iccid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iccid when calling getSimBalanceDrain'
            );
        }

        $resourcePath = '/{distributorId}/sim/{iccid}/balanceDrain';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }
        // path params
        if ($iccid !== null) {
            $resourcePath = str_replace(
                '{' . 'iccid' . '}',
                ObjectSerializer::toPathValue($iccid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSimByIccid
     *
     * Get a SIM information
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseSim
     */
    public function getSimByIccid($distributor_id, $iccid, $request_id = null)
    {
        list($response) = $this->getSimByIccidWithHttpInfo($distributor_id, $iccid, $request_id);
        return $response;
    }

    /**
     * Operation getSimByIccidWithHttpInfo
     *
     * Get a SIM information
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseSim, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSimByIccidWithHttpInfo($distributor_id, $iccid, $request_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseSim';
        $request = $this->getSimByIccidRequest($distributor_id, $iccid, $request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseSim',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSimByIccidAsync
     *
     * Get a SIM information
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimByIccidAsync($distributor_id, $iccid, $request_id = null)
    {
        return $this->getSimByIccidAsyncWithHttpInfo($distributor_id, $iccid, $request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSimByIccidAsyncWithHttpInfo
     *
     * Get a SIM information
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimByIccidAsyncWithHttpInfo($distributor_id, $iccid, $request_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseSim';
        $request = $this->getSimByIccidRequest($distributor_id, $iccid, $request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSimByIccid'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSimByIccidRequest($distributor_id, $iccid, $request_id = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling getSimByIccid'
            );
        }
        // verify the required parameter 'iccid' is set
        if ($iccid === null || (is_array($iccid) && count($iccid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iccid when calling getSimByIccid'
            );
        }

        $resourcePath = '/{distributorId}/sim/{iccid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }
        // path params
        if ($iccid !== null) {
            $resourcePath = str_replace(
                '{' . 'iccid' . '}',
                ObjectSerializer::toPathValue($iccid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSimCli
     *
     * Get calling line identification of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseSimCli
     */
    public function getSimCli($distributor_id, $iccid, $request_id = null)
    {
        list($response) = $this->getSimCliWithHttpInfo($distributor_id, $iccid, $request_id);
        return $response;
    }

    /**
     * Operation getSimCliWithHttpInfo
     *
     * Get calling line identification of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseSimCli, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSimCliWithHttpInfo($distributor_id, $iccid, $request_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseSimCli';
        $request = $this->getSimCliRequest($distributor_id, $iccid, $request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseSimCli',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSimCliAsync
     *
     * Get calling line identification of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimCliAsync($distributor_id, $iccid, $request_id = null)
    {
        return $this->getSimCliAsyncWithHttpInfo($distributor_id, $iccid, $request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSimCliAsyncWithHttpInfo
     *
     * Get calling line identification of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimCliAsyncWithHttpInfo($distributor_id, $iccid, $request_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseSimCli';
        $request = $this->getSimCliRequest($distributor_id, $iccid, $request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSimCli'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSimCliRequest($distributor_id, $iccid, $request_id = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling getSimCli'
            );
        }
        // verify the required parameter 'iccid' is set
        if ($iccid === null || (is_array($iccid) && count($iccid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iccid when calling getSimCli'
            );
        }

        $resourcePath = '/{distributorId}/sim/{iccid}/cli';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }
        // path params
        if ($iccid !== null) {
            $resourcePath = str_replace(
                '{' . 'iccid' . '}',
                ObjectSerializer::toPathValue($iccid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSimDids
     *
     * Get DID numbers of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseSimDids
     */
    public function getSimDids($distributor_id, $iccid, $request_id = null)
    {
        list($response) = $this->getSimDidsWithHttpInfo($distributor_id, $iccid, $request_id);
        return $response;
    }

    /**
     * Operation getSimDidsWithHttpInfo
     *
     * Get DID numbers of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseSimDids, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSimDidsWithHttpInfo($distributor_id, $iccid, $request_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseSimDids';
        $request = $this->getSimDidsRequest($distributor_id, $iccid, $request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseSimDids',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSimDidsAsync
     *
     * Get DID numbers of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimDidsAsync($distributor_id, $iccid, $request_id = null)
    {
        return $this->getSimDidsAsyncWithHttpInfo($distributor_id, $iccid, $request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSimDidsAsyncWithHttpInfo
     *
     * Get DID numbers of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimDidsAsyncWithHttpInfo($distributor_id, $iccid, $request_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseSimDids';
        $request = $this->getSimDidsRequest($distributor_id, $iccid, $request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSimDids'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSimDidsRequest($distributor_id, $iccid, $request_id = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling getSimDids'
            );
        }
        // verify the required parameter 'iccid' is set
        if ($iccid === null || (is_array($iccid) && count($iccid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iccid when calling getSimDids'
            );
        }

        $resourcePath = '/{distributorId}/sim/{iccid}/dids';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }
        // path params
        if ($iccid !== null) {
            $resourcePath = str_replace(
                '{' . 'iccid' . '}',
                ObjectSerializer::toPathValue($iccid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSimOverdraft
     *
     * Get the overdraft of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseOverdraft
     */
    public function getSimOverdraft($distributor_id, $iccid, $request_id = null)
    {
        list($response) = $this->getSimOverdraftWithHttpInfo($distributor_id, $iccid, $request_id);
        return $response;
    }

    /**
     * Operation getSimOverdraftWithHttpInfo
     *
     * Get the overdraft of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseOverdraft, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSimOverdraftWithHttpInfo($distributor_id, $iccid, $request_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseOverdraft';
        $request = $this->getSimOverdraftRequest($distributor_id, $iccid, $request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseOverdraft',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSimOverdraftAsync
     *
     * Get the overdraft of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimOverdraftAsync($distributor_id, $iccid, $request_id = null)
    {
        return $this->getSimOverdraftAsyncWithHttpInfo($distributor_id, $iccid, $request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSimOverdraftAsyncWithHttpInfo
     *
     * Get the overdraft of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimOverdraftAsyncWithHttpInfo($distributor_id, $iccid, $request_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseOverdraft';
        $request = $this->getSimOverdraftRequest($distributor_id, $iccid, $request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSimOverdraft'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSimOverdraftRequest($distributor_id, $iccid, $request_id = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling getSimOverdraft'
            );
        }
        // verify the required parameter 'iccid' is set
        if ($iccid === null || (is_array($iccid) && count($iccid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iccid when calling getSimOverdraft'
            );
        }

        $resourcePath = '/{distributorId}/sim/{iccid}/overdraft';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }
        // path params
        if ($iccid !== null) {
            $resourcePath = str_replace(
                '{' . 'iccid' . '}',
                ObjectSerializer::toPathValue($iccid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSimPackages
     *
     * Get packages owned by a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $package_statuses A list of target package status (optional)
     * @param  int $offset The offset of the first row to return, the first row is 0, not 1 (optional, default to 0)
     * @param  int $count The maximum number of rows to return (optional, default to 10)
     * @param  string $sort_field The field to sort the results (optional, default to packageId)
     * @param  string $sort_order The order to sort the results (optional, default to ASC)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseListResponsePackage
     */
    public function getSimPackages($distributor_id, $iccid, $request_id = null, $package_statuses = null, $offset = '0', $count = '10', $sort_field = 'packageId', $sort_order = 'ASC')
    {
        list($response) = $this->getSimPackagesWithHttpInfo($distributor_id, $iccid, $request_id, $package_statuses, $offset, $count, $sort_field, $sort_order);
        return $response;
    }

    /**
     * Operation getSimPackagesWithHttpInfo
     *
     * Get packages owned by a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $package_statuses A list of target package status (optional)
     * @param  int $offset The offset of the first row to return, the first row is 0, not 1 (optional, default to 0)
     * @param  int $count The maximum number of rows to return (optional, default to 10)
     * @param  string $sort_field The field to sort the results (optional, default to packageId)
     * @param  string $sort_order The order to sort the results (optional, default to ASC)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseListResponsePackage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSimPackagesWithHttpInfo($distributor_id, $iccid, $request_id = null, $package_statuses = null, $offset = '0', $count = '10', $sort_field = 'packageId', $sort_order = 'ASC')
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponsePackage';
        $request = $this->getSimPackagesRequest($distributor_id, $iccid, $request_id, $package_statuses, $offset, $count, $sort_field, $sort_order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseListResponsePackage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSimPackagesAsync
     *
     * Get packages owned by a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $package_statuses A list of target package status (optional)
     * @param  int $offset The offset of the first row to return, the first row is 0, not 1 (optional, default to 0)
     * @param  int $count The maximum number of rows to return (optional, default to 10)
     * @param  string $sort_field The field to sort the results (optional, default to packageId)
     * @param  string $sort_order The order to sort the results (optional, default to ASC)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimPackagesAsync($distributor_id, $iccid, $request_id = null, $package_statuses = null, $offset = '0', $count = '10', $sort_field = 'packageId', $sort_order = 'ASC')
    {
        return $this->getSimPackagesAsyncWithHttpInfo($distributor_id, $iccid, $request_id, $package_statuses, $offset, $count, $sort_field, $sort_order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSimPackagesAsyncWithHttpInfo
     *
     * Get packages owned by a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $package_statuses A list of target package status (optional)
     * @param  int $offset The offset of the first row to return, the first row is 0, not 1 (optional, default to 0)
     * @param  int $count The maximum number of rows to return (optional, default to 10)
     * @param  string $sort_field The field to sort the results (optional, default to packageId)
     * @param  string $sort_order The order to sort the results (optional, default to ASC)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimPackagesAsyncWithHttpInfo($distributor_id, $iccid, $request_id = null, $package_statuses = null, $offset = '0', $count = '10', $sort_field = 'packageId', $sort_order = 'ASC')
    {
        $returnType = '\Swagger\Client\Model\ResponseListResponsePackage';
        $request = $this->getSimPackagesRequest($distributor_id, $iccid, $request_id, $package_statuses, $offset, $count, $sort_field, $sort_order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSimPackages'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     * @param  string[] $package_statuses A list of target package status (optional)
     * @param  int $offset The offset of the first row to return, the first row is 0, not 1 (optional, default to 0)
     * @param  int $count The maximum number of rows to return (optional, default to 10)
     * @param  string $sort_field The field to sort the results (optional, default to packageId)
     * @param  string $sort_order The order to sort the results (optional, default to ASC)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSimPackagesRequest($distributor_id, $iccid, $request_id = null, $package_statuses = null, $offset = '0', $count = '10', $sort_field = 'packageId', $sort_order = 'ASC')
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling getSimPackages'
            );
        }
        // verify the required parameter 'iccid' is set
        if ($iccid === null || (is_array($iccid) && count($iccid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iccid when calling getSimPackages'
            );
        }

        $resourcePath = '/{distributorId}/sim/{iccid}/package/infos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($package_statuses)) {
            $package_statuses = ObjectSerializer::serializeCollection($package_statuses, 'multi', true);
        }
        if ($package_statuses !== null) {
            $queryParams['packageStatuses'] = ObjectSerializer::toQueryValue($package_statuses, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count, 'int32');
        }
        // query params
        if ($sort_field !== null) {
            $queryParams['sortField'] = ObjectSerializer::toQueryValue($sort_field, null);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sort_order, null);
        }
        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }
        // path params
        if ($iccid !== null) {
            $resourcePath = str_replace(
                '{' . 'iccid' . '}',
                ObjectSerializer::toPathValue($iccid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSimStatus
     *
     * Get the status of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseSimStatus
     */
    public function getSimStatus($distributor_id, $iccid, $request_id = null)
    {
        list($response) = $this->getSimStatusWithHttpInfo($distributor_id, $iccid, $request_id);
        return $response;
    }

    /**
     * Operation getSimStatusWithHttpInfo
     *
     * Get the status of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseSimStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSimStatusWithHttpInfo($distributor_id, $iccid, $request_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseSimStatus';
        $request = $this->getSimStatusRequest($distributor_id, $iccid, $request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseSimStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSimStatusAsync
     *
     * Get the status of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimStatusAsync($distributor_id, $iccid, $request_id = null)
    {
        return $this->getSimStatusAsyncWithHttpInfo($distributor_id, $iccid, $request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSimStatusAsyncWithHttpInfo
     *
     * Get the status of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimStatusAsyncWithHttpInfo($distributor_id, $iccid, $request_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseSimStatus';
        $request = $this->getSimStatusRequest($distributor_id, $iccid, $request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSimStatus'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSimStatusRequest($distributor_id, $iccid, $request_id = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling getSimStatus'
            );
        }
        // verify the required parameter 'iccid' is set
        if ($iccid === null || (is_array($iccid) && count($iccid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iccid when calling getSimStatus'
            );
        }

        $resourcePath = '/{distributorId}/sim/{iccid}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }
        // path params
        if ($iccid !== null) {
            $resourcePath = str_replace(
                '{' . 'iccid' . '}',
                ObjectSerializer::toPathValue($iccid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSimThrottle
     *
     * Get the throttle speed of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseSimThrottle
     */
    public function getSimThrottle($distributor_id, $iccid, $request_id = null)
    {
        list($response) = $this->getSimThrottleWithHttpInfo($distributor_id, $iccid, $request_id);
        return $response;
    }

    /**
     * Operation getSimThrottleWithHttpInfo
     *
     * Get the throttle speed of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseSimThrottle, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSimThrottleWithHttpInfo($distributor_id, $iccid, $request_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseSimThrottle';
        $request = $this->getSimThrottleRequest($distributor_id, $iccid, $request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseSimThrottle',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSimThrottleAsync
     *
     * Get the throttle speed of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimThrottleAsync($distributor_id, $iccid, $request_id = null)
    {
        return $this->getSimThrottleAsyncWithHttpInfo($distributor_id, $iccid, $request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSimThrottleAsyncWithHttpInfo
     *
     * Get the throttle speed of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimThrottleAsyncWithHttpInfo($distributor_id, $iccid, $request_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseSimThrottle';
        $request = $this->getSimThrottleRequest($distributor_id, $iccid, $request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSimThrottle'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSimThrottleRequest($distributor_id, $iccid, $request_id = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling getSimThrottle'
            );
        }
        // verify the required parameter 'iccid' is set
        if ($iccid === null || (is_array($iccid) && count($iccid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iccid when calling getSimThrottle'
            );
        }

        $resourcePath = '/{distributorId}/sim/{iccid}/throttle';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }
        // path params
        if ($iccid !== null) {
            $resourcePath = str_replace(
                '{' . 'iccid' . '}',
                ObjectSerializer::toPathValue($iccid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purge
     *
     * Terminate a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function purge($distributor_id, $iccid, $request_id = null)
    {
        $this->purgeWithHttpInfo($distributor_id, $iccid, $request_id);
    }

    /**
     * Operation purgeWithHttpInfo
     *
     * Terminate a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function purgeWithHttpInfo($distributor_id, $iccid, $request_id = null)
    {
        $returnType = '';
        $request = $this->purgeRequest($distributor_id, $iccid, $request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purgeAsync
     *
     * Terminate a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purgeAsync($distributor_id, $iccid, $request_id = null)
    {
        return $this->purgeAsyncWithHttpInfo($distributor_id, $iccid, $request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purgeAsyncWithHttpInfo
     *
     * Terminate a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purgeAsyncWithHttpInfo($distributor_id, $iccid, $request_id = null)
    {
        $returnType = '';
        $request = $this->purgeRequest($distributor_id, $iccid, $request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purge'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purgeRequest($distributor_id, $iccid, $request_id = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling purge'
            );
        }
        // verify the required parameter 'iccid' is set
        if ($iccid === null || (is_array($iccid) && count($iccid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iccid when calling purge'
            );
        }

        $resourcePath = '/{distributorId}/sim/{iccid}/purge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }
        // path params
        if ($iccid !== null) {
            $resourcePath = str_replace(
                '{' . 'iccid' . '}',
                ObjectSerializer::toPathValue($iccid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendSms
     *
     * Send an SMS
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSendSms $body body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendSms($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $this->sendSmsWithHttpInfo($distributor_id, $iccid, $body, $request_id);
    }

    /**
     * Operation sendSmsWithHttpInfo
     *
     * Send an SMS
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSendSms $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendSmsWithHttpInfo($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $returnType = '';
        $request = $this->sendSmsRequest($distributor_id, $iccid, $body, $request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendSmsAsync
     *
     * Send an SMS
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSendSms $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendSmsAsync($distributor_id, $iccid, $body = null, $request_id = null)
    {
        return $this->sendSmsAsyncWithHttpInfo($distributor_id, $iccid, $body, $request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendSmsAsyncWithHttpInfo
     *
     * Send an SMS
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSendSms $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendSmsAsyncWithHttpInfo($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $returnType = '';
        $request = $this->sendSmsRequest($distributor_id, $iccid, $body, $request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendSms'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSendSms $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendSmsRequest($distributor_id, $iccid, $body = null, $request_id = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling sendSms'
            );
        }
        // verify the required parameter 'iccid' is set
        if ($iccid === null || (is_array($iccid) && count($iccid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iccid when calling sendSms'
            );
        }

        $resourcePath = '/{distributorId}/sim/{iccid}/sendSms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }
        // path params
        if ($iccid !== null) {
            $resourcePath = str_replace(
                '{' . 'iccid' . '}',
                ObjectSerializer::toPathValue($iccid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendSmsBinary
     *
     * Send an SMS in binary
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSendSmsBinary $body body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendSmsBinary($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $this->sendSmsBinaryWithHttpInfo($distributor_id, $iccid, $body, $request_id);
    }

    /**
     * Operation sendSmsBinaryWithHttpInfo
     *
     * Send an SMS in binary
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSendSmsBinary $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendSmsBinaryWithHttpInfo($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $returnType = '';
        $request = $this->sendSmsBinaryRequest($distributor_id, $iccid, $body, $request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendSmsBinaryAsync
     *
     * Send an SMS in binary
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSendSmsBinary $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendSmsBinaryAsync($distributor_id, $iccid, $body = null, $request_id = null)
    {
        return $this->sendSmsBinaryAsyncWithHttpInfo($distributor_id, $iccid, $body, $request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendSmsBinaryAsyncWithHttpInfo
     *
     * Send an SMS in binary
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSendSmsBinary $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendSmsBinaryAsyncWithHttpInfo($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $returnType = '';
        $request = $this->sendSmsBinaryRequest($distributor_id, $iccid, $body, $request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendSmsBinary'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSendSmsBinary $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendSmsBinaryRequest($distributor_id, $iccid, $body = null, $request_id = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling sendSmsBinary'
            );
        }
        // verify the required parameter 'iccid' is set
        if ($iccid === null || (is_array($iccid) && count($iccid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iccid when calling sendSmsBinary'
            );
        }

        $resourcePath = '/{distributorId}/sim/{iccid}/sendSmsBinary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }
        // path params
        if ($iccid !== null) {
            $resourcePath = str_replace(
                '{' . 'iccid' . '}',
                ObjectSerializer::toPathValue($iccid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendSmsBinaryCustom
     *
     * Send a binary SMS with custom SMPP and GSM SMS parameters
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSendSmsBinaryCustom $body body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendSmsBinaryCustom($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $this->sendSmsBinaryCustomWithHttpInfo($distributor_id, $iccid, $body, $request_id);
    }

    /**
     * Operation sendSmsBinaryCustomWithHttpInfo
     *
     * Send a binary SMS with custom SMPP and GSM SMS parameters
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSendSmsBinaryCustom $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendSmsBinaryCustomWithHttpInfo($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $returnType = '';
        $request = $this->sendSmsBinaryCustomRequest($distributor_id, $iccid, $body, $request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendSmsBinaryCustomAsync
     *
     * Send a binary SMS with custom SMPP and GSM SMS parameters
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSendSmsBinaryCustom $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendSmsBinaryCustomAsync($distributor_id, $iccid, $body = null, $request_id = null)
    {
        return $this->sendSmsBinaryCustomAsyncWithHttpInfo($distributor_id, $iccid, $body, $request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendSmsBinaryCustomAsyncWithHttpInfo
     *
     * Send a binary SMS with custom SMPP and GSM SMS parameters
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSendSmsBinaryCustom $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendSmsBinaryCustomAsyncWithHttpInfo($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $returnType = '';
        $request = $this->sendSmsBinaryCustomRequest($distributor_id, $iccid, $body, $request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendSmsBinaryCustom'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSendSmsBinaryCustom $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendSmsBinaryCustomRequest($distributor_id, $iccid, $body = null, $request_id = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling sendSmsBinaryCustom'
            );
        }
        // verify the required parameter 'iccid' is set
        if ($iccid === null || (is_array($iccid) && count($iccid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iccid when calling sendSmsBinaryCustom'
            );
        }

        $resourcePath = '/{distributorId}/sim/{iccid}/sendSmsBinaryCustom';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }
        // path params
        if ($iccid !== null) {
            $resourcePath = str_replace(
                '{' . 'iccid' . '}',
                ObjectSerializer::toPathValue($iccid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setSimBalanceDrain
     *
     * Set the balance drain of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSetBalanceDrain $body body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function setSimBalanceDrain($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $this->setSimBalanceDrainWithHttpInfo($distributor_id, $iccid, $body, $request_id);
    }

    /**
     * Operation setSimBalanceDrainWithHttpInfo
     *
     * Set the balance drain of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSetBalanceDrain $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setSimBalanceDrainWithHttpInfo($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $returnType = '';
        $request = $this->setSimBalanceDrainRequest($distributor_id, $iccid, $body, $request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setSimBalanceDrainAsync
     *
     * Set the balance drain of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSetBalanceDrain $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setSimBalanceDrainAsync($distributor_id, $iccid, $body = null, $request_id = null)
    {
        return $this->setSimBalanceDrainAsyncWithHttpInfo($distributor_id, $iccid, $body, $request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setSimBalanceDrainAsyncWithHttpInfo
     *
     * Set the balance drain of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSetBalanceDrain $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setSimBalanceDrainAsyncWithHttpInfo($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $returnType = '';
        $request = $this->setSimBalanceDrainRequest($distributor_id, $iccid, $body, $request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setSimBalanceDrain'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSetBalanceDrain $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setSimBalanceDrainRequest($distributor_id, $iccid, $body = null, $request_id = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling setSimBalanceDrain'
            );
        }
        // verify the required parameter 'iccid' is set
        if ($iccid === null || (is_array($iccid) && count($iccid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iccid when calling setSimBalanceDrain'
            );
        }

        $resourcePath = '/{distributorId}/sim/{iccid}/balanceDrain';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }
        // path params
        if ($iccid !== null) {
            $resourcePath = str_replace(
                '{' . 'iccid' . '}',
                ObjectSerializer::toPathValue($iccid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setSimOverdraft
     *
     * Set the overdraft of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSimOverdraft $body body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function setSimOverdraft($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $this->setSimOverdraftWithHttpInfo($distributor_id, $iccid, $body, $request_id);
    }

    /**
     * Operation setSimOverdraftWithHttpInfo
     *
     * Set the overdraft of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSimOverdraft $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setSimOverdraftWithHttpInfo($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $returnType = '';
        $request = $this->setSimOverdraftRequest($distributor_id, $iccid, $body, $request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setSimOverdraftAsync
     *
     * Set the overdraft of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSimOverdraft $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setSimOverdraftAsync($distributor_id, $iccid, $body = null, $request_id = null)
    {
        return $this->setSimOverdraftAsyncWithHttpInfo($distributor_id, $iccid, $body, $request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setSimOverdraftAsyncWithHttpInfo
     *
     * Set the overdraft of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSimOverdraft $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setSimOverdraftAsyncWithHttpInfo($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $returnType = '';
        $request = $this->setSimOverdraftRequest($distributor_id, $iccid, $body, $request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setSimOverdraft'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSimOverdraft $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setSimOverdraftRequest($distributor_id, $iccid, $body = null, $request_id = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling setSimOverdraft'
            );
        }
        // verify the required parameter 'iccid' is set
        if ($iccid === null || (is_array($iccid) && count($iccid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iccid when calling setSimOverdraft'
            );
        }

        $resourcePath = '/{distributorId}/sim/{iccid}/overdraft';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }
        // path params
        if ($iccid !== null) {
            $resourcePath = str_replace(
                '{' . 'iccid' . '}',
                ObjectSerializer::toPathValue($iccid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setSimParent
     *
     * Set a SIM parent
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSimParent $body body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function setSimParent($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $this->setSimParentWithHttpInfo($distributor_id, $iccid, $body, $request_id);
    }

    /**
     * Operation setSimParentWithHttpInfo
     *
     * Set a SIM parent
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSimParent $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setSimParentWithHttpInfo($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $returnType = '';
        $request = $this->setSimParentRequest($distributor_id, $iccid, $body, $request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setSimParentAsync
     *
     * Set a SIM parent
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSimParent $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setSimParentAsync($distributor_id, $iccid, $body = null, $request_id = null)
    {
        return $this->setSimParentAsyncWithHttpInfo($distributor_id, $iccid, $body, $request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setSimParentAsyncWithHttpInfo
     *
     * Set a SIM parent
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSimParent $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setSimParentAsyncWithHttpInfo($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $returnType = '';
        $request = $this->setSimParentRequest($distributor_id, $iccid, $body, $request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setSimParent'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSimParent $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setSimParentRequest($distributor_id, $iccid, $body = null, $request_id = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling setSimParent'
            );
        }
        // verify the required parameter 'iccid' is set
        if ($iccid === null || (is_array($iccid) && count($iccid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iccid when calling setSimParent'
            );
        }

        $resourcePath = '/{distributorId}/sim/{iccid}/setParent';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }
        // path params
        if ($iccid !== null) {
            $resourcePath = str_replace(
                '{' . 'iccid' . '}',
                ObjectSerializer::toPathValue($iccid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setSimStatus
     *
     * Set the status of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSimStatus $body body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function setSimStatus($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $this->setSimStatusWithHttpInfo($distributor_id, $iccid, $body, $request_id);
    }

    /**
     * Operation setSimStatusWithHttpInfo
     *
     * Set the status of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSimStatus $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setSimStatusWithHttpInfo($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $returnType = '';
        $request = $this->setSimStatusRequest($distributor_id, $iccid, $body, $request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setSimStatusAsync
     *
     * Set the status of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSimStatus $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setSimStatusAsync($distributor_id, $iccid, $body = null, $request_id = null)
    {
        return $this->setSimStatusAsyncWithHttpInfo($distributor_id, $iccid, $body, $request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setSimStatusAsyncWithHttpInfo
     *
     * Set the status of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSimStatus $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setSimStatusAsyncWithHttpInfo($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $returnType = '';
        $request = $this->setSimStatusRequest($distributor_id, $iccid, $body, $request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setSimStatus'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSimStatus $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setSimStatusRequest($distributor_id, $iccid, $body = null, $request_id = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling setSimStatus'
            );
        }
        // verify the required parameter 'iccid' is set
        if ($iccid === null || (is_array($iccid) && count($iccid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iccid when calling setSimStatus'
            );
        }

        $resourcePath = '/{distributorId}/sim/{iccid}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }
        // path params
        if ($iccid !== null) {
            $resourcePath = str_replace(
                '{' . 'iccid' . '}',
                ObjectSerializer::toPathValue($iccid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setSimThrottle
     *
     * Set the throttle speed of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSimThrottle $body body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function setSimThrottle($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $this->setSimThrottleWithHttpInfo($distributor_id, $iccid, $body, $request_id);
    }

    /**
     * Operation setSimThrottleWithHttpInfo
     *
     * Set the throttle speed of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSimThrottle $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setSimThrottleWithHttpInfo($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $returnType = '';
        $request = $this->setSimThrottleRequest($distributor_id, $iccid, $body, $request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setSimThrottleAsync
     *
     * Set the throttle speed of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSimThrottle $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setSimThrottleAsync($distributor_id, $iccid, $body = null, $request_id = null)
    {
        return $this->setSimThrottleAsyncWithHttpInfo($distributor_id, $iccid, $body, $request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setSimThrottleAsyncWithHttpInfo
     *
     * Set the throttle speed of a SIM
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSimThrottle $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setSimThrottleAsyncWithHttpInfo($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $returnType = '';
        $request = $this->setSimThrottleRequest($distributor_id, $iccid, $body, $request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setSimThrottle'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSimThrottle $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setSimThrottleRequest($distributor_id, $iccid, $body = null, $request_id = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling setSimThrottle'
            );
        }
        // verify the required parameter 'iccid' is set
        if ($iccid === null || (is_array($iccid) && count($iccid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iccid when calling setSimThrottle'
            );
        }

        $resourcePath = '/{distributorId}/sim/{iccid}/throttle';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }
        // path params
        if ($iccid !== null) {
            $resourcePath = str_replace(
                '{' . 'iccid' . '}',
                ObjectSerializer::toPathValue($iccid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation switchProfileOTA
     *
     * Switch IMSI profile Over-The-Air
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSwitchProfileOTA $body body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function switchProfileOTA($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $this->switchProfileOTAWithHttpInfo($distributor_id, $iccid, $body, $request_id);
    }

    /**
     * Operation switchProfileOTAWithHttpInfo
     *
     * Switch IMSI profile Over-The-Air
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSwitchProfileOTA $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function switchProfileOTAWithHttpInfo($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $returnType = '';
        $request = $this->switchProfileOTARequest($distributor_id, $iccid, $body, $request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation switchProfileOTAAsync
     *
     * Switch IMSI profile Over-The-Air
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSwitchProfileOTA $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function switchProfileOTAAsync($distributor_id, $iccid, $body = null, $request_id = null)
    {
        return $this->switchProfileOTAAsyncWithHttpInfo($distributor_id, $iccid, $body, $request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation switchProfileOTAAsyncWithHttpInfo
     *
     * Switch IMSI profile Over-The-Air
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSwitchProfileOTA $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function switchProfileOTAAsyncWithHttpInfo($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $returnType = '';
        $request = $this->switchProfileOTARequest($distributor_id, $iccid, $body, $request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'switchProfileOTA'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestSwitchProfileOTA $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function switchProfileOTARequest($distributor_id, $iccid, $body = null, $request_id = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling switchProfileOTA'
            );
        }
        // verify the required parameter 'iccid' is set
        if ($iccid === null || (is_array($iccid) && count($iccid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iccid when calling switchProfileOTA'
            );
        }

        $resourcePath = '/{distributorId}/sim/{iccid}/switchProfileOTA';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }
        // path params
        if ($iccid !== null) {
            $resourcePath = str_replace(
                '{' . 'iccid' . '}',
                ObjectSerializer::toPathValue($iccid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateRoutingConfiguration
     *
     * Update the routing configuration for a sim ICCID
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestUpdateRouteConfiguration $body body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateRoutingConfiguration($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $this->updateRoutingConfigurationWithHttpInfo($distributor_id, $iccid, $body, $request_id);
    }

    /**
     * Operation updateRoutingConfigurationWithHttpInfo
     *
     * Update the routing configuration for a sim ICCID
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestUpdateRouteConfiguration $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRoutingConfigurationWithHttpInfo($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $returnType = '';
        $request = $this->updateRoutingConfigurationRequest($distributor_id, $iccid, $body, $request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateRoutingConfigurationAsync
     *
     * Update the routing configuration for a sim ICCID
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestUpdateRouteConfiguration $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRoutingConfigurationAsync($distributor_id, $iccid, $body = null, $request_id = null)
    {
        return $this->updateRoutingConfigurationAsyncWithHttpInfo($distributor_id, $iccid, $body, $request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateRoutingConfigurationAsyncWithHttpInfo
     *
     * Update the routing configuration for a sim ICCID
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestUpdateRouteConfiguration $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRoutingConfigurationAsyncWithHttpInfo($distributor_id, $iccid, $body = null, $request_id = null)
    {
        $returnType = '';
        $request = $this->updateRoutingConfigurationRequest($distributor_id, $iccid, $body, $request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateRoutingConfiguration'
     *
     * @param  int $distributor_id The unique identifier of a distributor (required)
     * @param  string $iccid The unique identifier of a SIM (required)
     * @param  \Swagger\Client\Model\RequestUpdateRouteConfiguration $body (optional)
     * @param  string $request_id It will be returned in the response header, the purpose of the RequestId to provide a reference ID to the client side developer if one is using a asynchronous system (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateRoutingConfigurationRequest($distributor_id, $iccid, $body = null, $request_id = null)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null || (is_array($distributor_id) && count($distributor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling updateRoutingConfiguration'
            );
        }
        // verify the required parameter 'iccid' is set
        if ($iccid === null || (is_array($iccid) && count($iccid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iccid when calling updateRoutingConfiguration'
            );
        }

        $resourcePath = '/{distributorId}/sim/{iccid}/updateRoutingConfiguration';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($request_id !== null) {
            $headerParams['RequestId'] = ObjectSerializer::toHeaderValue($request_id);
        }

        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }
        // path params
        if ($iccid !== null) {
            $resourcePath = str_replace(
                '{' . 'iccid' . '}',
                ObjectSerializer::toPathValue($iccid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
