<?php
/**
 * ResponsePackageType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Distributor PPU Service
 *
 * Â© KnowRoaming LTD 2017
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponsePackageType Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponsePackageType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResponsePackageType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'package_type_id' => 'int',
'name' => 'string',
'traffic_policy_id' => 'int',
'supported_countries' => 'string[]',
'preferred_imsi_id' => 'int',
'voice_usage_allowance_in_seconds' => 'int',
'data_usage_allowance_in_bytes' => 'int',
'sms_usage_allowance_in_nums' => 'int',
'time_allowance_in_seconds' => 'int',
'activation_time_allowance_in_seconds' => 'int',
'activation_type' => 'string',
'date_earliest_activation' => 'int',
'date_earliest_available' => 'int',
'date_latest_available' => 'int',
'notes' => 'string',
'data_usage_allowance_type' => 'string',
'voice_usage_allowance_type' => 'string',
'sms_usage_allowance_type' => 'string',
'epoch_created' => 'int',
'epoch_modified' => 'int',
'time_allowance' => '\Swagger\Client\Model\ResponseTimeAllowance',
'status' => 'string',
'date_deactivated' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'package_type_id' => 'int32',
'name' => null,
'traffic_policy_id' => 'int32',
'supported_countries' => null,
'preferred_imsi_id' => 'int32',
'voice_usage_allowance_in_seconds' => 'int32',
'data_usage_allowance_in_bytes' => 'int64',
'sms_usage_allowance_in_nums' => 'int32',
'time_allowance_in_seconds' => 'int32',
'activation_time_allowance_in_seconds' => 'int32',
'activation_type' => null,
'date_earliest_activation' => 'int64',
'date_earliest_available' => 'int64',
'date_latest_available' => 'int64',
'notes' => null,
'data_usage_allowance_type' => null,
'voice_usage_allowance_type' => null,
'sms_usage_allowance_type' => null,
'epoch_created' => 'int64',
'epoch_modified' => 'int64',
'time_allowance' => null,
'status' => null,
'date_deactivated' => 'int64'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'package_type_id' => 'packageTypeId',
'name' => 'name',
'traffic_policy_id' => 'trafficPolicyId',
'supported_countries' => 'supportedCountries',
'preferred_imsi_id' => 'preferredImsiId',
'voice_usage_allowance_in_seconds' => 'voiceUsageAllowanceInSeconds',
'data_usage_allowance_in_bytes' => 'dataUsageAllowanceInBytes',
'sms_usage_allowance_in_nums' => 'smsUsageAllowanceInNums',
'time_allowance_in_seconds' => 'timeAllowanceInSeconds',
'activation_time_allowance_in_seconds' => 'activationTimeAllowanceInSeconds',
'activation_type' => 'activationType',
'date_earliest_activation' => 'dateEarliestActivation',
'date_earliest_available' => 'dateEarliestAvailable',
'date_latest_available' => 'dateLatestAvailable',
'notes' => 'notes',
'data_usage_allowance_type' => 'dataUsageAllowanceType',
'voice_usage_allowance_type' => 'voiceUsageAllowanceType',
'sms_usage_allowance_type' => 'smsUsageAllowanceType',
'epoch_created' => 'epochCreated',
'epoch_modified' => 'epochModified',
'time_allowance' => 'timeAllowance',
'status' => 'status',
'date_deactivated' => 'dateDeactivated'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'package_type_id' => 'setPackageTypeId',
'name' => 'setName',
'traffic_policy_id' => 'setTrafficPolicyId',
'supported_countries' => 'setSupportedCountries',
'preferred_imsi_id' => 'setPreferredImsiId',
'voice_usage_allowance_in_seconds' => 'setVoiceUsageAllowanceInSeconds',
'data_usage_allowance_in_bytes' => 'setDataUsageAllowanceInBytes',
'sms_usage_allowance_in_nums' => 'setSmsUsageAllowanceInNums',
'time_allowance_in_seconds' => 'setTimeAllowanceInSeconds',
'activation_time_allowance_in_seconds' => 'setActivationTimeAllowanceInSeconds',
'activation_type' => 'setActivationType',
'date_earliest_activation' => 'setDateEarliestActivation',
'date_earliest_available' => 'setDateEarliestAvailable',
'date_latest_available' => 'setDateLatestAvailable',
'notes' => 'setNotes',
'data_usage_allowance_type' => 'setDataUsageAllowanceType',
'voice_usage_allowance_type' => 'setVoiceUsageAllowanceType',
'sms_usage_allowance_type' => 'setSmsUsageAllowanceType',
'epoch_created' => 'setEpochCreated',
'epoch_modified' => 'setEpochModified',
'time_allowance' => 'setTimeAllowance',
'status' => 'setStatus',
'date_deactivated' => 'setDateDeactivated'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'package_type_id' => 'getPackageTypeId',
'name' => 'getName',
'traffic_policy_id' => 'getTrafficPolicyId',
'supported_countries' => 'getSupportedCountries',
'preferred_imsi_id' => 'getPreferredImsiId',
'voice_usage_allowance_in_seconds' => 'getVoiceUsageAllowanceInSeconds',
'data_usage_allowance_in_bytes' => 'getDataUsageAllowanceInBytes',
'sms_usage_allowance_in_nums' => 'getSmsUsageAllowanceInNums',
'time_allowance_in_seconds' => 'getTimeAllowanceInSeconds',
'activation_time_allowance_in_seconds' => 'getActivationTimeAllowanceInSeconds',
'activation_type' => 'getActivationType',
'date_earliest_activation' => 'getDateEarliestActivation',
'date_earliest_available' => 'getDateEarliestAvailable',
'date_latest_available' => 'getDateLatestAvailable',
'notes' => 'getNotes',
'data_usage_allowance_type' => 'getDataUsageAllowanceType',
'voice_usage_allowance_type' => 'getVoiceUsageAllowanceType',
'sms_usage_allowance_type' => 'getSmsUsageAllowanceType',
'epoch_created' => 'getEpochCreated',
'epoch_modified' => 'getEpochModified',
'time_allowance' => 'getTimeAllowance',
'status' => 'getStatus',
'date_deactivated' => 'getDateDeactivated'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACTIVATION_TYPE_API = 'API';
const ACTIVATION_TYPE_PDP = 'PDP';
const ACTIVATION_TYPE_LU = 'LU';
const DATA_USAGE_ALLOWANCE_TYPE_LIMITED = 'LIMITED';
const DATA_USAGE_ALLOWANCE_TYPE_UNLIMITED = 'UNLIMITED';
const VOICE_USAGE_ALLOWANCE_TYPE_LIMITED = 'LIMITED';
const VOICE_USAGE_ALLOWANCE_TYPE_UNLIMITED = 'UNLIMITED';
const SMS_USAGE_ALLOWANCE_TYPE_LIMITED = 'LIMITED';
const SMS_USAGE_ALLOWANCE_TYPE_UNLIMITED = 'UNLIMITED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActivationTypeAllowableValues()
    {
        return [
            self::ACTIVATION_TYPE_API,
self::ACTIVATION_TYPE_PDP,
self::ACTIVATION_TYPE_LU,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDataUsageAllowanceTypeAllowableValues()
    {
        return [
            self::DATA_USAGE_ALLOWANCE_TYPE_LIMITED,
self::DATA_USAGE_ALLOWANCE_TYPE_UNLIMITED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVoiceUsageAllowanceTypeAllowableValues()
    {
        return [
            self::VOICE_USAGE_ALLOWANCE_TYPE_LIMITED,
self::VOICE_USAGE_ALLOWANCE_TYPE_UNLIMITED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSmsUsageAllowanceTypeAllowableValues()
    {
        return [
            self::SMS_USAGE_ALLOWANCE_TYPE_LIMITED,
self::SMS_USAGE_ALLOWANCE_TYPE_UNLIMITED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['package_type_id'] = isset($data['package_type_id']) ? $data['package_type_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['traffic_policy_id'] = isset($data['traffic_policy_id']) ? $data['traffic_policy_id'] : null;
        $this->container['supported_countries'] = isset($data['supported_countries']) ? $data['supported_countries'] : null;
        $this->container['preferred_imsi_id'] = isset($data['preferred_imsi_id']) ? $data['preferred_imsi_id'] : null;
        $this->container['voice_usage_allowance_in_seconds'] = isset($data['voice_usage_allowance_in_seconds']) ? $data['voice_usage_allowance_in_seconds'] : null;
        $this->container['data_usage_allowance_in_bytes'] = isset($data['data_usage_allowance_in_bytes']) ? $data['data_usage_allowance_in_bytes'] : null;
        $this->container['sms_usage_allowance_in_nums'] = isset($data['sms_usage_allowance_in_nums']) ? $data['sms_usage_allowance_in_nums'] : null;
        $this->container['time_allowance_in_seconds'] = isset($data['time_allowance_in_seconds']) ? $data['time_allowance_in_seconds'] : null;
        $this->container['activation_time_allowance_in_seconds'] = isset($data['activation_time_allowance_in_seconds']) ? $data['activation_time_allowance_in_seconds'] : null;
        $this->container['activation_type'] = isset($data['activation_type']) ? $data['activation_type'] : null;
        $this->container['date_earliest_activation'] = isset($data['date_earliest_activation']) ? $data['date_earliest_activation'] : null;
        $this->container['date_earliest_available'] = isset($data['date_earliest_available']) ? $data['date_earliest_available'] : null;
        $this->container['date_latest_available'] = isset($data['date_latest_available']) ? $data['date_latest_available'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['data_usage_allowance_type'] = isset($data['data_usage_allowance_type']) ? $data['data_usage_allowance_type'] : null;
        $this->container['voice_usage_allowance_type'] = isset($data['voice_usage_allowance_type']) ? $data['voice_usage_allowance_type'] : null;
        $this->container['sms_usage_allowance_type'] = isset($data['sms_usage_allowance_type']) ? $data['sms_usage_allowance_type'] : null;
        $this->container['epoch_created'] = isset($data['epoch_created']) ? $data['epoch_created'] : null;
        $this->container['epoch_modified'] = isset($data['epoch_modified']) ? $data['epoch_modified'] : null;
        $this->container['time_allowance'] = isset($data['time_allowance']) ? $data['time_allowance'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['date_deactivated'] = isset($data['date_deactivated']) ? $data['date_deactivated'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['package_type_id'] === null) {
            $invalidProperties[] = "'package_type_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['supported_countries'] === null) {
            $invalidProperties[] = "'supported_countries' can't be null";
        }
        if ($this->container['voice_usage_allowance_in_seconds'] === null) {
            $invalidProperties[] = "'voice_usage_allowance_in_seconds' can't be null";
        }
        if ($this->container['data_usage_allowance_in_bytes'] === null) {
            $invalidProperties[] = "'data_usage_allowance_in_bytes' can't be null";
        }
        if ($this->container['sms_usage_allowance_in_nums'] === null) {
            $invalidProperties[] = "'sms_usage_allowance_in_nums' can't be null";
        }
        if ($this->container['activation_time_allowance_in_seconds'] === null) {
            $invalidProperties[] = "'activation_time_allowance_in_seconds' can't be null";
        }
        if ($this->container['activation_type'] === null) {
            $invalidProperties[] = "'activation_type' can't be null";
        }
        $allowedValues = $this->getActivationTypeAllowableValues();
        if (!is_null($this->container['activation_type']) && !in_array($this->container['activation_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'activation_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['date_earliest_activation'] === null) {
            $invalidProperties[] = "'date_earliest_activation' can't be null";
        }
        if ($this->container['date_earliest_available'] === null) {
            $invalidProperties[] = "'date_earliest_available' can't be null";
        }
        if ($this->container['date_latest_available'] === null) {
            $invalidProperties[] = "'date_latest_available' can't be null";
        }
        if ($this->container['data_usage_allowance_type'] === null) {
            $invalidProperties[] = "'data_usage_allowance_type' can't be null";
        }
        $allowedValues = $this->getDataUsageAllowanceTypeAllowableValues();
        if (!is_null($this->container['data_usage_allowance_type']) && !in_array($this->container['data_usage_allowance_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'data_usage_allowance_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['voice_usage_allowance_type'] === null) {
            $invalidProperties[] = "'voice_usage_allowance_type' can't be null";
        }
        $allowedValues = $this->getVoiceUsageAllowanceTypeAllowableValues();
        if (!is_null($this->container['voice_usage_allowance_type']) && !in_array($this->container['voice_usage_allowance_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'voice_usage_allowance_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['sms_usage_allowance_type'] === null) {
            $invalidProperties[] = "'sms_usage_allowance_type' can't be null";
        }
        $allowedValues = $this->getSmsUsageAllowanceTypeAllowableValues();
        if (!is_null($this->container['sms_usage_allowance_type']) && !in_array($this->container['sms_usage_allowance_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sms_usage_allowance_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['epoch_created'] === null) {
            $invalidProperties[] = "'epoch_created' can't be null";
        }
        if ($this->container['epoch_modified'] === null) {
            $invalidProperties[] = "'epoch_modified' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['date_deactivated'] === null) {
            $invalidProperties[] = "'date_deactivated' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets package_type_id
     *
     * @return int
     */
    public function getPackageTypeId()
    {
        return $this->container['package_type_id'];
    }

    /**
     * Sets package_type_id
     *
     * @param int $package_type_id The unique identifier of a package type
     *
     * @return $this
     */
    public function setPackageTypeId($package_type_id)
    {
        $this->container['package_type_id'] = $package_type_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of a package type
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets traffic_policy_id
     *
     * @return int
     */
    public function getTrafficPolicyId()
    {
        return $this->container['traffic_policy_id'];
    }

    /**
     * Sets traffic_policy_id
     *
     * @param int $traffic_policy_id The unique identifier of a traffic policy which is applied to a package type
     *
     * @return $this
     */
    public function setTrafficPolicyId($traffic_policy_id)
    {
        $this->container['traffic_policy_id'] = $traffic_policy_id;

        return $this;
    }

    /**
     * Gets supported_countries
     *
     * @return string[]
     */
    public function getSupportedCountries()
    {
        return $this->container['supported_countries'];
    }

    /**
     * Sets supported_countries
     *
     * @param string[] $supported_countries A list of countries this package is supported in (Country is in ISO 3)
     *
     * @return $this
     */
    public function setSupportedCountries($supported_countries)
    {
        $this->container['supported_countries'] = $supported_countries;

        return $this;
    }

    /**
     * Gets preferred_imsi_id
     *
     * @return int
     */
    public function getPreferredImsiId()
    {
        return $this->container['preferred_imsi_id'];
    }

    /**
     * Sets preferred_imsi_id
     *
     * @param int $preferred_imsi_id The preferred IMSI ID
     *
     * @return $this
     */
    public function setPreferredImsiId($preferred_imsi_id)
    {
        $this->container['preferred_imsi_id'] = $preferred_imsi_id;

        return $this;
    }

    /**
     * Gets voice_usage_allowance_in_seconds
     *
     * @return int
     */
    public function getVoiceUsageAllowanceInSeconds()
    {
        return $this->container['voice_usage_allowance_in_seconds'];
    }

    /**
     * Sets voice_usage_allowance_in_seconds
     *
     * @param int $voice_usage_allowance_in_seconds Seconds of voice usage allowed as part of this package
     *
     * @return $this
     */
    public function setVoiceUsageAllowanceInSeconds($voice_usage_allowance_in_seconds)
    {
        $this->container['voice_usage_allowance_in_seconds'] = $voice_usage_allowance_in_seconds;

        return $this;
    }

    /**
     * Gets data_usage_allowance_in_bytes
     *
     * @return int
     */
    public function getDataUsageAllowanceInBytes()
    {
        return $this->container['data_usage_allowance_in_bytes'];
    }

    /**
     * Sets data_usage_allowance_in_bytes
     *
     * @param int $data_usage_allowance_in_bytes Bytes of data usage allowed as part of this package
     *
     * @return $this
     */
    public function setDataUsageAllowanceInBytes($data_usage_allowance_in_bytes)
    {
        $this->container['data_usage_allowance_in_bytes'] = $data_usage_allowance_in_bytes;

        return $this;
    }

    /**
     * Gets sms_usage_allowance_in_nums
     *
     * @return int
     */
    public function getSmsUsageAllowanceInNums()
    {
        return $this->container['sms_usage_allowance_in_nums'];
    }

    /**
     * Sets sms_usage_allowance_in_nums
     *
     * @param int $sms_usage_allowance_in_nums Numbers of SMS usage allowed as part of this package
     *
     * @return $this
     */
    public function setSmsUsageAllowanceInNums($sms_usage_allowance_in_nums)
    {
        $this->container['sms_usage_allowance_in_nums'] = $sms_usage_allowance_in_nums;

        return $this;
    }

    /**
     * Gets time_allowance_in_seconds
     *
     * @return int
     */
    public function getTimeAllowanceInSeconds()
    {
        return $this->container['time_allowance_in_seconds'];
    }

    /**
     * Sets time_allowance_in_seconds
     *
     * @param int $time_allowance_in_seconds The time period in seconds that a package lasts for after activation. This property and {@code timeAllowance} are mutually exclusive. Only one of them must be set
     *
     * @return $this
     */
    public function setTimeAllowanceInSeconds($time_allowance_in_seconds)
    {
        $this->container['time_allowance_in_seconds'] = $time_allowance_in_seconds;

        return $this;
    }

    /**
     * Gets activation_time_allowance_in_seconds
     *
     * @return int
     */
    public function getActivationTimeAllowanceInSeconds()
    {
        return $this->container['activation_time_allowance_in_seconds'];
    }

    /**
     * Sets activation_time_allowance_in_seconds
     *
     * @param int $activation_time_allowance_in_seconds After created a package, the package can only be activated within a certain time period in seconds
     *
     * @return $this
     */
    public function setActivationTimeAllowanceInSeconds($activation_time_allowance_in_seconds)
    {
        $this->container['activation_time_allowance_in_seconds'] = $activation_time_allowance_in_seconds;

        return $this;
    }

    /**
     * Gets activation_type
     *
     * @return string
     */
    public function getActivationType()
    {
        return $this->container['activation_type'];
    }

    /**
     * Sets activation_type
     *
     * @param string $activation_type The activation type of a package type
     *
     * @return $this
     */
    public function setActivationType($activation_type)
    {
        $allowedValues = $this->getActivationTypeAllowableValues();
        if (!in_array($activation_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'activation_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['activation_type'] = $activation_type;

        return $this;
    }

    /**
     * Gets date_earliest_activation
     *
     * @return int
     */
    public function getDateEarliestActivation()
    {
        return $this->container['date_earliest_activation'];
    }

    /**
     * Sets date_earliest_activation
     *
     * @param int $date_earliest_activation The earliest activation date of a package (Date is in Epoch)
     *
     * @return $this
     */
    public function setDateEarliestActivation($date_earliest_activation)
    {
        $this->container['date_earliest_activation'] = $date_earliest_activation;

        return $this;
    }

    /**
     * Gets date_earliest_available
     *
     * @return int
     */
    public function getDateEarliestAvailable()
    {
        return $this->container['date_earliest_available'];
    }

    /**
     * Sets date_earliest_available
     *
     * @param int $date_earliest_available The earliest available date of a package (Date is in Epoch)
     *
     * @return $this
     */
    public function setDateEarliestAvailable($date_earliest_available)
    {
        $this->container['date_earliest_available'] = $date_earliest_available;

        return $this;
    }

    /**
     * Gets date_latest_available
     *
     * @return int
     */
    public function getDateLatestAvailable()
    {
        return $this->container['date_latest_available'];
    }

    /**
     * Sets date_latest_available
     *
     * @param int $date_latest_available The latest available date of a package (Date is in Epoch)
     *
     * @return $this
     */
    public function setDateLatestAvailable($date_latest_available)
    {
        $this->container['date_latest_available'] = $date_latest_available;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes Notes of a package
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets data_usage_allowance_type
     *
     * @return string
     */
    public function getDataUsageAllowanceType()
    {
        return $this->container['data_usage_allowance_type'];
    }

    /**
     * Sets data_usage_allowance_type
     *
     * @param string $data_usage_allowance_type The type of data usage allowance
     *
     * @return $this
     */
    public function setDataUsageAllowanceType($data_usage_allowance_type)
    {
        $allowedValues = $this->getDataUsageAllowanceTypeAllowableValues();
        if (!in_array($data_usage_allowance_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'data_usage_allowance_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['data_usage_allowance_type'] = $data_usage_allowance_type;

        return $this;
    }

    /**
     * Gets voice_usage_allowance_type
     *
     * @return string
     */
    public function getVoiceUsageAllowanceType()
    {
        return $this->container['voice_usage_allowance_type'];
    }

    /**
     * Sets voice_usage_allowance_type
     *
     * @param string $voice_usage_allowance_type The type of voice usage allowance
     *
     * @return $this
     */
    public function setVoiceUsageAllowanceType($voice_usage_allowance_type)
    {
        $allowedValues = $this->getVoiceUsageAllowanceTypeAllowableValues();
        if (!in_array($voice_usage_allowance_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'voice_usage_allowance_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['voice_usage_allowance_type'] = $voice_usage_allowance_type;

        return $this;
    }

    /**
     * Gets sms_usage_allowance_type
     *
     * @return string
     */
    public function getSmsUsageAllowanceType()
    {
        return $this->container['sms_usage_allowance_type'];
    }

    /**
     * Sets sms_usage_allowance_type
     *
     * @param string $sms_usage_allowance_type The type of SMS usage allowance
     *
     * @return $this
     */
    public function setSmsUsageAllowanceType($sms_usage_allowance_type)
    {
        $allowedValues = $this->getSmsUsageAllowanceTypeAllowableValues();
        if (!in_array($sms_usage_allowance_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sms_usage_allowance_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sms_usage_allowance_type'] = $sms_usage_allowance_type;

        return $this;
    }

    /**
     * Gets epoch_created
     *
     * @return int
     */
    public function getEpochCreated()
    {
        return $this->container['epoch_created'];
    }

    /**
     * Sets epoch_created
     *
     * @param int $epoch_created The timestamp when the Package Type was created
     *
     * @return $this
     */
    public function setEpochCreated($epoch_created)
    {
        $this->container['epoch_created'] = $epoch_created;

        return $this;
    }

    /**
     * Gets epoch_modified
     *
     * @return int
     */
    public function getEpochModified()
    {
        return $this->container['epoch_modified'];
    }

    /**
     * Sets epoch_modified
     *
     * @param int $epoch_modified The timestamp when the Package Type was last modified
     *
     * @return $this
     */
    public function setEpochModified($epoch_modified)
    {
        $this->container['epoch_modified'] = $epoch_modified;

        return $this;
    }

    /**
     * Gets time_allowance
     *
     * @return \Swagger\Client\Model\ResponseTimeAllowance
     */
    public function getTimeAllowance()
    {
        return $this->container['time_allowance'];
    }

    /**
     * Sets time_allowance
     *
     * @param \Swagger\Client\Model\ResponseTimeAllowance $time_allowance time_allowance
     *
     * @return $this
     */
    public function setTimeAllowance($time_allowance)
    {
        $this->container['time_allowance'] = $time_allowance;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the Package Type
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets date_deactivated
     *
     * @return int
     */
    public function getDateDeactivated()
    {
        return $this->container['date_deactivated'];
    }

    /**
     * Sets date_deactivated
     *
     * @param int $date_deactivated The timestamp when the Package Type is deactivated
     *
     * @return $this
     */
    public function setDateDeactivated($date_deactivated)
    {
        $this->container['date_deactivated'] = $date_deactivated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
