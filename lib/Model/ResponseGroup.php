<?php
/**
 * ResponseGroup
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Distributor PPU Service
 *
 * Â© KnowRoaming LTD 2017
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponseGroup Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseGroup implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResponseGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'parent_group_id' => 'int',
'ocs_group_id' => 'int',
'inventory_id' => 'int',
'name' => 'string',
'number_of_subgroups' => 'int',
'number_of_sims' => 'int',
'date_created' => 'int',
'date_modified' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
'parent_group_id' => 'int32',
'ocs_group_id' => 'int32',
'inventory_id' => 'int32',
'name' => null,
'number_of_subgroups' => 'int32',
'number_of_sims' => 'int32',
'date_created' => 'int64',
'date_modified' => 'int64'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'parent_group_id' => 'parentGroupId',
'ocs_group_id' => 'ocsGroupId',
'inventory_id' => 'inventoryId',
'name' => 'name',
'number_of_subgroups' => 'numberOfSubgroups',
'number_of_sims' => 'numberOfSims',
'date_created' => 'dateCreated',
'date_modified' => 'dateModified'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'parent_group_id' => 'setParentGroupId',
'ocs_group_id' => 'setOcsGroupId',
'inventory_id' => 'setInventoryId',
'name' => 'setName',
'number_of_subgroups' => 'setNumberOfSubgroups',
'number_of_sims' => 'setNumberOfSims',
'date_created' => 'setDateCreated',
'date_modified' => 'setDateModified'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'parent_group_id' => 'getParentGroupId',
'ocs_group_id' => 'getOcsGroupId',
'inventory_id' => 'getInventoryId',
'name' => 'getName',
'number_of_subgroups' => 'getNumberOfSubgroups',
'number_of_sims' => 'getNumberOfSims',
'date_created' => 'getDateCreated',
'date_modified' => 'getDateModified'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['parent_group_id'] = isset($data['parent_group_id']) ? $data['parent_group_id'] : null;
        $this->container['ocs_group_id'] = isset($data['ocs_group_id']) ? $data['ocs_group_id'] : null;
        $this->container['inventory_id'] = isset($data['inventory_id']) ? $data['inventory_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['number_of_subgroups'] = isset($data['number_of_subgroups']) ? $data['number_of_subgroups'] : null;
        $this->container['number_of_sims'] = isset($data['number_of_sims']) ? $data['number_of_sims'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['date_modified'] = isset($data['date_modified']) ? $data['date_modified'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique identifier of a group
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parent_group_id
     *
     * @return int
     */
    public function getParentGroupId()
    {
        return $this->container['parent_group_id'];
    }

    /**
     * Sets parent_group_id
     *
     * @param int $parent_group_id The unique identifier of a parent group which owns a group
     *
     * @return $this
     */
    public function setParentGroupId($parent_group_id)
    {
        $this->container['parent_group_id'] = $parent_group_id;

        return $this;
    }

    /**
     * Gets ocs_group_id
     *
     * @return int
     */
    public function getOcsGroupId()
    {
        return $this->container['ocs_group_id'];
    }

    /**
     * Sets ocs_group_id
     *
     * @param int $ocs_group_id The unique identifier of a group in OCS
     *
     * @return $this
     */
    public function setOcsGroupId($ocs_group_id)
    {
        $this->container['ocs_group_id'] = $ocs_group_id;

        return $this;
    }

    /**
     * Gets inventory_id
     *
     * @return int
     */
    public function getInventoryId()
    {
        return $this->container['inventory_id'];
    }

    /**
     * Sets inventory_id
     *
     * @param int $inventory_id The unique identifier of an inventory which owns a group
     *
     * @return $this
     */
    public function setInventoryId($inventory_id)
    {
        $this->container['inventory_id'] = $inventory_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of a group
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets number_of_subgroups
     *
     * @return int
     */
    public function getNumberOfSubgroups()
    {
        return $this->container['number_of_subgroups'];
    }

    /**
     * Sets number_of_subgroups
     *
     * @param int $number_of_subgroups The number of sub-groups owned by a group
     *
     * @return $this
     */
    public function setNumberOfSubgroups($number_of_subgroups)
    {
        $this->container['number_of_subgroups'] = $number_of_subgroups;

        return $this;
    }

    /**
     * Gets number_of_sims
     *
     * @return int
     */
    public function getNumberOfSims()
    {
        return $this->container['number_of_sims'];
    }

    /**
     * Sets number_of_sims
     *
     * @param int $number_of_sims The number of SIMs owned by a group
     *
     * @return $this
     */
    public function setNumberOfSims($number_of_sims)
    {
        $this->container['number_of_sims'] = $number_of_sims;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return int
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param int $date_created The timestamp the group was created at
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_modified
     *
     * @return int
     */
    public function getDateModified()
    {
        return $this->container['date_modified'];
    }

    /**
     * Sets date_modified
     *
     * @param int $date_modified The timestamp the group was last modified at
     *
     * @return $this
     */
    public function setDateModified($date_modified)
    {
        $this->container['date_modified'] = $date_modified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
