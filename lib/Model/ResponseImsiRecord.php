<?php
/**
 * ResponseImsiRecord
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Distributor PPU Service
 *
 * Â© KnowRoaming LTD 2017
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponseImsiRecord Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseImsiRecord implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResponseImsiRecord';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'mapped_imsi_number' => 'int',
'sponsored_imsis' => '\Swagger\Client\Model\ResponseSponsorImsi[]',
'distributor_id' => 'int',
'distributor_name' => 'string',
'inventory_id' => 'int',
'inventory_name' => 'string',
'whitelist_id' => 'int',
'whitelist_name' => 'string',
'create_epoch_milli' => 'int',
'modified_epoch_milli' => 'int',
'remove_epoch_milli' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'mapped_imsi_number' => 'int64',
'sponsored_imsis' => null,
'distributor_id' => 'int32',
'distributor_name' => null,
'inventory_id' => 'int32',
'inventory_name' => null,
'whitelist_id' => 'int32',
'whitelist_name' => null,
'create_epoch_milli' => 'int64',
'modified_epoch_milli' => 'int64',
'remove_epoch_milli' => 'int64'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mapped_imsi_number' => 'mappedImsiNumber',
'sponsored_imsis' => 'sponsoredImsis',
'distributor_id' => 'distributorId',
'distributor_name' => 'distributorName',
'inventory_id' => 'inventoryId',
'inventory_name' => 'inventoryName',
'whitelist_id' => 'whitelistId',
'whitelist_name' => 'whitelistName',
'create_epoch_milli' => 'createEpochMilli',
'modified_epoch_milli' => 'modifiedEpochMilli',
'remove_epoch_milli' => 'removeEpochMilli'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mapped_imsi_number' => 'setMappedImsiNumber',
'sponsored_imsis' => 'setSponsoredImsis',
'distributor_id' => 'setDistributorId',
'distributor_name' => 'setDistributorName',
'inventory_id' => 'setInventoryId',
'inventory_name' => 'setInventoryName',
'whitelist_id' => 'setWhitelistId',
'whitelist_name' => 'setWhitelistName',
'create_epoch_milli' => 'setCreateEpochMilli',
'modified_epoch_milli' => 'setModifiedEpochMilli',
'remove_epoch_milli' => 'setRemoveEpochMilli'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mapped_imsi_number' => 'getMappedImsiNumber',
'sponsored_imsis' => 'getSponsoredImsis',
'distributor_id' => 'getDistributorId',
'distributor_name' => 'getDistributorName',
'inventory_id' => 'getInventoryId',
'inventory_name' => 'getInventoryName',
'whitelist_id' => 'getWhitelistId',
'whitelist_name' => 'getWhitelistName',
'create_epoch_milli' => 'getCreateEpochMilli',
'modified_epoch_milli' => 'getModifiedEpochMilli',
'remove_epoch_milli' => 'getRemoveEpochMilli'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mapped_imsi_number'] = isset($data['mapped_imsi_number']) ? $data['mapped_imsi_number'] : null;
        $this->container['sponsored_imsis'] = isset($data['sponsored_imsis']) ? $data['sponsored_imsis'] : null;
        $this->container['distributor_id'] = isset($data['distributor_id']) ? $data['distributor_id'] : null;
        $this->container['distributor_name'] = isset($data['distributor_name']) ? $data['distributor_name'] : null;
        $this->container['inventory_id'] = isset($data['inventory_id']) ? $data['inventory_id'] : null;
        $this->container['inventory_name'] = isset($data['inventory_name']) ? $data['inventory_name'] : null;
        $this->container['whitelist_id'] = isset($data['whitelist_id']) ? $data['whitelist_id'] : null;
        $this->container['whitelist_name'] = isset($data['whitelist_name']) ? $data['whitelist_name'] : null;
        $this->container['create_epoch_milli'] = isset($data['create_epoch_milli']) ? $data['create_epoch_milli'] : null;
        $this->container['modified_epoch_milli'] = isset($data['modified_epoch_milli']) ? $data['modified_epoch_milli'] : null;
        $this->container['remove_epoch_milli'] = isset($data['remove_epoch_milli']) ? $data['remove_epoch_milli'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mapped_imsi_number
     *
     * @return int
     */
    public function getMappedImsiNumber()
    {
        return $this->container['mapped_imsi_number'];
    }

    /**
     * Sets mapped_imsi_number
     *
     * @param int $mapped_imsi_number The number of Customer IMSI
     *
     * @return $this
     */
    public function setMappedImsiNumber($mapped_imsi_number)
    {
        $this->container['mapped_imsi_number'] = $mapped_imsi_number;

        return $this;
    }

    /**
     * Gets sponsored_imsis
     *
     * @return \Swagger\Client\Model\ResponseSponsorImsi[]
     */
    public function getSponsoredImsis()
    {
        return $this->container['sponsored_imsis'];
    }

    /**
     * Sets sponsored_imsis
     *
     * @param \Swagger\Client\Model\ResponseSponsorImsi[] $sponsored_imsis A list of Sponsored IMSIs assigned to a IMSI
     *
     * @return $this
     */
    public function setSponsoredImsis($sponsored_imsis)
    {
        $this->container['sponsored_imsis'] = $sponsored_imsis;

        return $this;
    }

    /**
     * Gets distributor_id
     *
     * @return int
     */
    public function getDistributorId()
    {
        return $this->container['distributor_id'];
    }

    /**
     * Sets distributor_id
     *
     * @param int $distributor_id The unique identifier of the distributor who owns the IMSI
     *
     * @return $this
     */
    public function setDistributorId($distributor_id)
    {
        $this->container['distributor_id'] = $distributor_id;

        return $this;
    }

    /**
     * Gets distributor_name
     *
     * @return string
     */
    public function getDistributorName()
    {
        return $this->container['distributor_name'];
    }

    /**
     * Sets distributor_name
     *
     * @param string $distributor_name The name of the distributor who owns the IMSI
     *
     * @return $this
     */
    public function setDistributorName($distributor_name)
    {
        $this->container['distributor_name'] = $distributor_name;

        return $this;
    }

    /**
     * Gets inventory_id
     *
     * @return int
     */
    public function getInventoryId()
    {
        return $this->container['inventory_id'];
    }

    /**
     * Sets inventory_id
     *
     * @param int $inventory_id The unique identifier of an inventory which owned a IMSI
     *
     * @return $this
     */
    public function setInventoryId($inventory_id)
    {
        $this->container['inventory_id'] = $inventory_id;

        return $this;
    }

    /**
     * Gets inventory_name
     *
     * @return string
     */
    public function getInventoryName()
    {
        return $this->container['inventory_name'];
    }

    /**
     * Sets inventory_name
     *
     * @param string $inventory_name The name of an inventory which owned a IMSI
     *
     * @return $this
     */
    public function setInventoryName($inventory_name)
    {
        $this->container['inventory_name'] = $inventory_name;

        return $this;
    }

    /**
     * Gets whitelist_id
     *
     * @return int
     */
    public function getWhitelistId()
    {
        return $this->container['whitelist_id'];
    }

    /**
     * Sets whitelist_id
     *
     * @param int $whitelist_id The Whitelist ID that this IMSI is using
     *
     * @return $this
     */
    public function setWhitelistId($whitelist_id)
    {
        $this->container['whitelist_id'] = $whitelist_id;

        return $this;
    }

    /**
     * Gets whitelist_name
     *
     * @return string
     */
    public function getWhitelistName()
    {
        return $this->container['whitelist_name'];
    }

    /**
     * Sets whitelist_name
     *
     * @param string $whitelist_name The name of Whitelist that this IMSI is using
     *
     * @return $this
     */
    public function setWhitelistName($whitelist_name)
    {
        $this->container['whitelist_name'] = $whitelist_name;

        return $this;
    }

    /**
     * Gets create_epoch_milli
     *
     * @return int
     */
    public function getCreateEpochMilli()
    {
        return $this->container['create_epoch_milli'];
    }

    /**
     * Sets create_epoch_milli
     *
     * @param int $create_epoch_milli The timestamp when this IMSI has been provisioned
     *
     * @return $this
     */
    public function setCreateEpochMilli($create_epoch_milli)
    {
        $this->container['create_epoch_milli'] = $create_epoch_milli;

        return $this;
    }

    /**
     * Gets modified_epoch_milli
     *
     * @return int
     */
    public function getModifiedEpochMilli()
    {
        return $this->container['modified_epoch_milli'];
    }

    /**
     * Sets modified_epoch_milli
     *
     * @param int $modified_epoch_milli The timestamp when this IMSI has been modified
     *
     * @return $this
     */
    public function setModifiedEpochMilli($modified_epoch_milli)
    {
        $this->container['modified_epoch_milli'] = $modified_epoch_milli;

        return $this;
    }

    /**
     * Gets remove_epoch_milli
     *
     * @return int
     */
    public function getRemoveEpochMilli()
    {
        return $this->container['remove_epoch_milli'];
    }

    /**
     * Sets remove_epoch_milli
     *
     * @param int $remove_epoch_milli The timestamp when this IMSI has been removed
     *
     * @return $this
     */
    public function setRemoveEpochMilli($remove_epoch_milli)
    {
        $this->container['remove_epoch_milli'] = $remove_epoch_milli;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
