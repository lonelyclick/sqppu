<?php
/**
 * RequestCreateDistributor
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Distributor PPU Service
 *
 * Â© KnowRoaming LTD 2017
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RequestCreateDistributor Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RequestCreateDistributor implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RequestCreateDistributor';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'distributor_name' => 'string',
'parent_distributor_id' => 'int',
'distributor_note' => 'string',
'login_username' => 'string',
'login_email' => 'string',
'inventory_name' => 'string',
'parent_inventory_id' => 'int',
'inventory_balance_in_cents' => 'float',
'inventory_balance_currency' => 'string',
'inventory_overdraft_in_cents' => 'float',
'inventory_overdraft_currency' => 'string',
'inventory_type' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'distributor_name' => null,
'parent_distributor_id' => 'int32',
'distributor_note' => null,
'login_username' => null,
'login_email' => null,
'inventory_name' => null,
'parent_inventory_id' => 'int32',
'inventory_balance_in_cents' => null,
'inventory_balance_currency' => null,
'inventory_overdraft_in_cents' => null,
'inventory_overdraft_currency' => null,
'inventory_type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'distributor_name' => 'distributorName',
'parent_distributor_id' => 'parentDistributorId',
'distributor_note' => 'distributorNote',
'login_username' => 'loginUsername',
'login_email' => 'loginEmail',
'inventory_name' => 'inventoryName',
'parent_inventory_id' => 'parentInventoryId',
'inventory_balance_in_cents' => 'inventoryBalanceInCents',
'inventory_balance_currency' => 'inventoryBalanceCurrency',
'inventory_overdraft_in_cents' => 'inventoryOverdraftInCents',
'inventory_overdraft_currency' => 'inventoryOverdraftCurrency',
'inventory_type' => 'inventoryType'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'distributor_name' => 'setDistributorName',
'parent_distributor_id' => 'setParentDistributorId',
'distributor_note' => 'setDistributorNote',
'login_username' => 'setLoginUsername',
'login_email' => 'setLoginEmail',
'inventory_name' => 'setInventoryName',
'parent_inventory_id' => 'setParentInventoryId',
'inventory_balance_in_cents' => 'setInventoryBalanceInCents',
'inventory_balance_currency' => 'setInventoryBalanceCurrency',
'inventory_overdraft_in_cents' => 'setInventoryOverdraftInCents',
'inventory_overdraft_currency' => 'setInventoryOverdraftCurrency',
'inventory_type' => 'setInventoryType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'distributor_name' => 'getDistributorName',
'parent_distributor_id' => 'getParentDistributorId',
'distributor_note' => 'getDistributorNote',
'login_username' => 'getLoginUsername',
'login_email' => 'getLoginEmail',
'inventory_name' => 'getInventoryName',
'parent_inventory_id' => 'getParentInventoryId',
'inventory_balance_in_cents' => 'getInventoryBalanceInCents',
'inventory_balance_currency' => 'getInventoryBalanceCurrency',
'inventory_overdraft_in_cents' => 'getInventoryOverdraftInCents',
'inventory_overdraft_currency' => 'getInventoryOverdraftCurrency',
'inventory_type' => 'getInventoryType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const INVENTORY_TYPE_WHOLESALE = 'WHOLESALE';
const INVENTORY_TYPE_T4_T = 'T4T';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInventoryTypeAllowableValues()
    {
        return [
            self::INVENTORY_TYPE_WHOLESALE,
self::INVENTORY_TYPE_T4_T,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['distributor_name'] = isset($data['distributor_name']) ? $data['distributor_name'] : null;
        $this->container['parent_distributor_id'] = isset($data['parent_distributor_id']) ? $data['parent_distributor_id'] : null;
        $this->container['distributor_note'] = isset($data['distributor_note']) ? $data['distributor_note'] : null;
        $this->container['login_username'] = isset($data['login_username']) ? $data['login_username'] : null;
        $this->container['login_email'] = isset($data['login_email']) ? $data['login_email'] : null;
        $this->container['inventory_name'] = isset($data['inventory_name']) ? $data['inventory_name'] : null;
        $this->container['parent_inventory_id'] = isset($data['parent_inventory_id']) ? $data['parent_inventory_id'] : null;
        $this->container['inventory_balance_in_cents'] = isset($data['inventory_balance_in_cents']) ? $data['inventory_balance_in_cents'] : null;
        $this->container['inventory_balance_currency'] = isset($data['inventory_balance_currency']) ? $data['inventory_balance_currency'] : null;
        $this->container['inventory_overdraft_in_cents'] = isset($data['inventory_overdraft_in_cents']) ? $data['inventory_overdraft_in_cents'] : null;
        $this->container['inventory_overdraft_currency'] = isset($data['inventory_overdraft_currency']) ? $data['inventory_overdraft_currency'] : null;
        $this->container['inventory_type'] = isset($data['inventory_type']) ? $data['inventory_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['distributor_name'] === null) {
            $invalidProperties[] = "'distributor_name' can't be null";
        }
        if ($this->container['parent_distributor_id'] === null) {
            $invalidProperties[] = "'parent_distributor_id' can't be null";
        }
        if ($this->container['login_username'] === null) {
            $invalidProperties[] = "'login_username' can't be null";
        }
        if ($this->container['login_email'] === null) {
            $invalidProperties[] = "'login_email' can't be null";
        }
        if ($this->container['inventory_name'] === null) {
            $invalidProperties[] = "'inventory_name' can't be null";
        }
        if ($this->container['parent_inventory_id'] === null) {
            $invalidProperties[] = "'parent_inventory_id' can't be null";
        }
        if ($this->container['inventory_balance_in_cents'] === null) {
            $invalidProperties[] = "'inventory_balance_in_cents' can't be null";
        }
        if ($this->container['inventory_balance_currency'] === null) {
            $invalidProperties[] = "'inventory_balance_currency' can't be null";
        }
        if ($this->container['inventory_overdraft_in_cents'] === null) {
            $invalidProperties[] = "'inventory_overdraft_in_cents' can't be null";
        }
        if ($this->container['inventory_overdraft_currency'] === null) {
            $invalidProperties[] = "'inventory_overdraft_currency' can't be null";
        }
        $allowedValues = $this->getInventoryTypeAllowableValues();
        if (!is_null($this->container['inventory_type']) && !in_array($this->container['inventory_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'inventory_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets distributor_name
     *
     * @return string
     */
    public function getDistributorName()
    {
        return $this->container['distributor_name'];
    }

    /**
     * Sets distributor_name
     *
     * @param string $distributor_name The name of a distributor
     *
     * @return $this
     */
    public function setDistributorName($distributor_name)
    {
        $this->container['distributor_name'] = $distributor_name;

        return $this;
    }

    /**
     * Gets parent_distributor_id
     *
     * @return int
     */
    public function getParentDistributorId()
    {
        return $this->container['parent_distributor_id'];
    }

    /**
     * Sets parent_distributor_id
     *
     * @param int $parent_distributor_id The distributor ID of the parent
     *
     * @return $this
     */
    public function setParentDistributorId($parent_distributor_id)
    {
        $this->container['parent_distributor_id'] = $parent_distributor_id;

        return $this;
    }

    /**
     * Gets distributor_note
     *
     * @return string
     */
    public function getDistributorNote()
    {
        return $this->container['distributor_note'];
    }

    /**
     * Sets distributor_note
     *
     * @param string $distributor_note The note of a distributor
     *
     * @return $this
     */
    public function setDistributorNote($distributor_note)
    {
        $this->container['distributor_note'] = $distributor_note;

        return $this;
    }

    /**
     * Gets login_username
     *
     * @return string
     */
    public function getLoginUsername()
    {
        return $this->container['login_username'];
    }

    /**
     * Sets login_username
     *
     * @param string $login_username The username of a distributor login
     *
     * @return $this
     */
    public function setLoginUsername($login_username)
    {
        $this->container['login_username'] = $login_username;

        return $this;
    }

    /**
     * Gets login_email
     *
     * @return string
     */
    public function getLoginEmail()
    {
        return $this->container['login_email'];
    }

    /**
     * Sets login_email
     *
     * @param string $login_email The email of a distributor login
     *
     * @return $this
     */
    public function setLoginEmail($login_email)
    {
        $this->container['login_email'] = $login_email;

        return $this;
    }

    /**
     * Gets inventory_name
     *
     * @return string
     */
    public function getInventoryName()
    {
        return $this->container['inventory_name'];
    }

    /**
     * Sets inventory_name
     *
     * @param string $inventory_name The name of an inventory under a distributor
     *
     * @return $this
     */
    public function setInventoryName($inventory_name)
    {
        $this->container['inventory_name'] = $inventory_name;

        return $this;
    }

    /**
     * Gets parent_inventory_id
     *
     * @return int
     */
    public function getParentInventoryId()
    {
        return $this->container['parent_inventory_id'];
    }

    /**
     * Sets parent_inventory_id
     *
     * @param int $parent_inventory_id The unique identifier of a parent's inventory
     *
     * @return $this
     */
    public function setParentInventoryId($parent_inventory_id)
    {
        $this->container['parent_inventory_id'] = $parent_inventory_id;

        return $this;
    }

    /**
     * Gets inventory_balance_in_cents
     *
     * @return float
     */
    public function getInventoryBalanceInCents()
    {
        return $this->container['inventory_balance_in_cents'];
    }

    /**
     * Sets inventory_balance_in_cents
     *
     * @param float $inventory_balance_in_cents The balance of an inventory under a distributor (Unit is in cents)
     *
     * @return $this
     */
    public function setInventoryBalanceInCents($inventory_balance_in_cents)
    {
        $this->container['inventory_balance_in_cents'] = $inventory_balance_in_cents;

        return $this;
    }

    /**
     * Gets inventory_balance_currency
     *
     * @return string
     */
    public function getInventoryBalanceCurrency()
    {
        return $this->container['inventory_balance_currency'];
    }

    /**
     * Sets inventory_balance_currency
     *
     * @param string $inventory_balance_currency The balance currency of an inventory under a distributor (Currency is in ISO 4217)
     *
     * @return $this
     */
    public function setInventoryBalanceCurrency($inventory_balance_currency)
    {
        $this->container['inventory_balance_currency'] = $inventory_balance_currency;

        return $this;
    }

    /**
     * Gets inventory_overdraft_in_cents
     *
     * @return float
     */
    public function getInventoryOverdraftInCents()
    {
        return $this->container['inventory_overdraft_in_cents'];
    }

    /**
     * Sets inventory_overdraft_in_cents
     *
     * @param float $inventory_overdraft_in_cents The overdraft of an inventory under a distributor (Unit is in cents)
     *
     * @return $this
     */
    public function setInventoryOverdraftInCents($inventory_overdraft_in_cents)
    {
        $this->container['inventory_overdraft_in_cents'] = $inventory_overdraft_in_cents;

        return $this;
    }

    /**
     * Gets inventory_overdraft_currency
     *
     * @return string
     */
    public function getInventoryOverdraftCurrency()
    {
        return $this->container['inventory_overdraft_currency'];
    }

    /**
     * Sets inventory_overdraft_currency
     *
     * @param string $inventory_overdraft_currency The overdraft currency of an inventory under a distributor (Currency is in ISO 4217)
     *
     * @return $this
     */
    public function setInventoryOverdraftCurrency($inventory_overdraft_currency)
    {
        $this->container['inventory_overdraft_currency'] = $inventory_overdraft_currency;

        return $this;
    }

    /**
     * Gets inventory_type
     *
     * @return string
     */
    public function getInventoryType()
    {
        return $this->container['inventory_type'];
    }

    /**
     * Sets inventory_type
     *
     * @param string $inventory_type The inventory type this inventory will have. Cannot be changed. Defaults to WHOLESALE
     *
     * @return $this
     */
    public function setInventoryType($inventory_type)
    {
        $allowedValues = $this->getInventoryTypeAllowableValues();
        if (!is_null($inventory_type) && !in_array($inventory_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'inventory_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['inventory_type'] = $inventory_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
