<?php
/**
 * ResponseSimNotification
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Distributor PPU Service
 *
 * Â© KnowRoaming LTD 2017
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponseSimNotification Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseSimNotification implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResponseSimNotification';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'name' => 'string',
'date_created' => 'int',
'date_modified' => 'int',
'data_threshold' => 'int',
'iccids' => 'string[]',
'num_of_iccids' => 'int',
'recipients' => '\Swagger\Client\Model\RequestSimNotificationRecipient[]',
'num_of_recipients' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
'name' => null,
'date_created' => 'int64',
'date_modified' => 'int64',
'data_threshold' => 'int64',
'iccids' => null,
'num_of_iccids' => 'int32',
'recipients' => null,
'num_of_recipients' => 'int32'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'date_created' => 'dateCreated',
'date_modified' => 'dateModified',
'data_threshold' => 'dataThreshold',
'iccids' => 'iccids',
'num_of_iccids' => 'numOfIccids',
'recipients' => 'recipients',
'num_of_recipients' => 'numOfRecipients'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'date_created' => 'setDateCreated',
'date_modified' => 'setDateModified',
'data_threshold' => 'setDataThreshold',
'iccids' => 'setIccids',
'num_of_iccids' => 'setNumOfIccids',
'recipients' => 'setRecipients',
'num_of_recipients' => 'setNumOfRecipients'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'date_created' => 'getDateCreated',
'date_modified' => 'getDateModified',
'data_threshold' => 'getDataThreshold',
'iccids' => 'getIccids',
'num_of_iccids' => 'getNumOfIccids',
'recipients' => 'getRecipients',
'num_of_recipients' => 'getNumOfRecipients'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['date_modified'] = isset($data['date_modified']) ? $data['date_modified'] : null;
        $this->container['data_threshold'] = isset($data['data_threshold']) ? $data['data_threshold'] : null;
        $this->container['iccids'] = isset($data['iccids']) ? $data['iccids'] : null;
        $this->container['num_of_iccids'] = isset($data['num_of_iccids']) ? $data['num_of_iccids'] : null;
        $this->container['recipients'] = isset($data['recipients']) ? $data['recipients'] : null;
        $this->container['num_of_recipients'] = isset($data['num_of_recipients']) ? $data['num_of_recipients'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['date_created'] === null) {
            $invalidProperties[] = "'date_created' can't be null";
        }
        if ($this->container['date_modified'] === null) {
            $invalidProperties[] = "'date_modified' can't be null";
        }
        if ($this->container['data_threshold'] === null) {
            $invalidProperties[] = "'data_threshold' can't be null";
        }
        if ($this->container['iccids'] === null) {
            $invalidProperties[] = "'iccids' can't be null";
        }
        if ($this->container['num_of_iccids'] === null) {
            $invalidProperties[] = "'num_of_iccids' can't be null";
        }
        if ($this->container['recipients'] === null) {
            $invalidProperties[] = "'recipients' can't be null";
        }
        if ($this->container['num_of_recipients'] === null) {
            $invalidProperties[] = "'num_of_recipients' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique identifier of the Sim Notification
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the Sim Notification
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return int
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param int $date_created The timestamp this Sim Notification was created
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_modified
     *
     * @return int
     */
    public function getDateModified()
    {
        return $this->container['date_modified'];
    }

    /**
     * Sets date_modified
     *
     * @param int $date_modified The timestamp this Sim Notification was last updated
     *
     * @return $this
     */
    public function setDateModified($date_modified)
    {
        $this->container['date_modified'] = $date_modified;

        return $this;
    }

    /**
     * Gets data_threshold
     *
     * @return int
     */
    public function getDataThreshold()
    {
        return $this->container['data_threshold'];
    }

    /**
     * Sets data_threshold
     *
     * @param int $data_threshold The data threshold that will trigger a notification
     *
     * @return $this
     */
    public function setDataThreshold($data_threshold)
    {
        $this->container['data_threshold'] = $data_threshold;

        return $this;
    }

    /**
     * Gets iccids
     *
     * @return string[]
     */
    public function getIccids()
    {
        return $this->container['iccids'];
    }

    /**
     * Sets iccids
     *
     * @param string[] $iccids The list of ICCIDs that will be monitored by the Sim Notification
     *
     * @return $this
     */
    public function setIccids($iccids)
    {
        $this->container['iccids'] = $iccids;

        return $this;
    }

    /**
     * Gets num_of_iccids
     *
     * @return int
     */
    public function getNumOfIccids()
    {
        return $this->container['num_of_iccids'];
    }

    /**
     * Sets num_of_iccids
     *
     * @param int $num_of_iccids The number of ICCIDs being monitored by the Sim Notification
     *
     * @return $this
     */
    public function setNumOfIccids($num_of_iccids)
    {
        $this->container['num_of_iccids'] = $num_of_iccids;

        return $this;
    }

    /**
     * Gets recipients
     *
     * @return \Swagger\Client\Model\RequestSimNotificationRecipient[]
     */
    public function getRecipients()
    {
        return $this->container['recipients'];
    }

    /**
     * Sets recipients
     *
     * @param \Swagger\Client\Model\RequestSimNotificationRecipient[] $recipients The list of recipients to be notified
     *
     * @return $this
     */
    public function setRecipients($recipients)
    {
        $this->container['recipients'] = $recipients;

        return $this;
    }

    /**
     * Gets num_of_recipients
     *
     * @return int
     */
    public function getNumOfRecipients()
    {
        return $this->container['num_of_recipients'];
    }

    /**
     * Sets num_of_recipients
     *
     * @param int $num_of_recipients The number of recipients on the Sim Notification
     *
     * @return $this
     */
    public function setNumOfRecipients($num_of_recipients)
    {
        $this->container['num_of_recipients'] = $num_of_recipients;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
