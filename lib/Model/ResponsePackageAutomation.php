<?php
/**
 * ResponsePackageAutomation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Distributor PPU Service
 *
 * Â© KnowRoaming LTD 2017
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponsePackageAutomation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponsePackageAutomation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResponsePackageAutomation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'name' => 'string',
'package_template_id' => 'int',
'sims' => 'string[]',
'frequency' => 'string',
'date_first_trigger' => 'int',
'date_created' => 'int',
'date_expiration' => 'int',
'date_deactivated' => 'int',
'deactivated' => 'bool',
'reason_deactivated' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
'name' => null,
'package_template_id' => 'int32',
'sims' => null,
'frequency' => null,
'date_first_trigger' => 'int64',
'date_created' => 'int64',
'date_expiration' => 'int64',
'date_deactivated' => 'int64',
'deactivated' => null,
'reason_deactivated' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'package_template_id' => 'packageTemplateId',
'sims' => 'sims',
'frequency' => 'frequency',
'date_first_trigger' => 'dateFirstTrigger',
'date_created' => 'dateCreated',
'date_expiration' => 'dateExpiration',
'date_deactivated' => 'dateDeactivated',
'deactivated' => 'deactivated',
'reason_deactivated' => 'reasonDeactivated'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'package_template_id' => 'setPackageTemplateId',
'sims' => 'setSims',
'frequency' => 'setFrequency',
'date_first_trigger' => 'setDateFirstTrigger',
'date_created' => 'setDateCreated',
'date_expiration' => 'setDateExpiration',
'date_deactivated' => 'setDateDeactivated',
'deactivated' => 'setDeactivated',
'reason_deactivated' => 'setReasonDeactivated'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'package_template_id' => 'getPackageTemplateId',
'sims' => 'getSims',
'frequency' => 'getFrequency',
'date_first_trigger' => 'getDateFirstTrigger',
'date_created' => 'getDateCreated',
'date_expiration' => 'getDateExpiration',
'date_deactivated' => 'getDateDeactivated',
'deactivated' => 'getDeactivated',
'reason_deactivated' => 'getReasonDeactivated'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FREQUENCY_DAY = 'EVERY_DAY';
const FREQUENCY_WEEK = 'EVERY_WEEK';
const FREQUENCY_MONTH = 'EVERY_MONTH';
const FREQUENCY_YEAR = 'EVERY_YEAR';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFrequencyAllowableValues()
    {
        return [
            self::FREQUENCY_DAY,
self::FREQUENCY_WEEK,
self::FREQUENCY_MONTH,
self::FREQUENCY_YEAR,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['package_template_id'] = isset($data['package_template_id']) ? $data['package_template_id'] : null;
        $this->container['sims'] = isset($data['sims']) ? $data['sims'] : null;
        $this->container['frequency'] = isset($data['frequency']) ? $data['frequency'] : null;
        $this->container['date_first_trigger'] = isset($data['date_first_trigger']) ? $data['date_first_trigger'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['date_expiration'] = isset($data['date_expiration']) ? $data['date_expiration'] : null;
        $this->container['date_deactivated'] = isset($data['date_deactivated']) ? $data['date_deactivated'] : null;
        $this->container['deactivated'] = isset($data['deactivated']) ? $data['deactivated'] : false;
        $this->container['reason_deactivated'] = isset($data['reason_deactivated']) ? $data['reason_deactivated'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['package_template_id'] === null) {
            $invalidProperties[] = "'package_template_id' can't be null";
        }
        if ($this->container['sims'] === null) {
            $invalidProperties[] = "'sims' can't be null";
        }
        if ($this->container['frequency'] === null) {
            $invalidProperties[] = "'frequency' can't be null";
        }
        $allowedValues = $this->getFrequencyAllowableValues();
        if (!is_null($this->container['frequency']) && !in_array($this->container['frequency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'frequency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['date_first_trigger'] === null) {
            $invalidProperties[] = "'date_first_trigger' can't be null";
        }
        if ($this->container['date_created'] === null) {
            $invalidProperties[] = "'date_created' can't be null";
        }
        if ($this->container['date_expiration'] === null) {
            $invalidProperties[] = "'date_expiration' can't be null";
        }
        if ($this->container['date_deactivated'] === null) {
            $invalidProperties[] = "'date_deactivated' can't be null";
        }
        if ($this->container['deactivated'] === null) {
            $invalidProperties[] = "'deactivated' can't be null";
        }
        if ($this->container['reason_deactivated'] === null) {
            $invalidProperties[] = "'reason_deactivated' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets package_template_id
     *
     * @return int
     */
    public function getPackageTemplateId()
    {
        return $this->container['package_template_id'];
    }

    /**
     * Sets package_template_id
     *
     * @param int $package_template_id package_template_id
     *
     * @return $this
     */
    public function setPackageTemplateId($package_template_id)
    {
        $this->container['package_template_id'] = $package_template_id;

        return $this;
    }

    /**
     * Gets sims
     *
     * @return string[]
     */
    public function getSims()
    {
        return $this->container['sims'];
    }

    /**
     * Sets sims
     *
     * @param string[] $sims sims
     *
     * @return $this
     */
    public function setSims($sims)
    {
        $this->container['sims'] = $sims;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return string
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param string $frequency frequency
     *
     * @return $this
     */
    public function setFrequency($frequency)
    {
        $allowedValues = $this->getFrequencyAllowableValues();
        if (!in_array($frequency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'frequency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets date_first_trigger
     *
     * @return int
     */
    public function getDateFirstTrigger()
    {
        return $this->container['date_first_trigger'];
    }

    /**
     * Sets date_first_trigger
     *
     * @param int $date_first_trigger date_first_trigger
     *
     * @return $this
     */
    public function setDateFirstTrigger($date_first_trigger)
    {
        $this->container['date_first_trigger'] = $date_first_trigger;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return int
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param int $date_created date_created
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_expiration
     *
     * @return int
     */
    public function getDateExpiration()
    {
        return $this->container['date_expiration'];
    }

    /**
     * Sets date_expiration
     *
     * @param int $date_expiration date_expiration
     *
     * @return $this
     */
    public function setDateExpiration($date_expiration)
    {
        $this->container['date_expiration'] = $date_expiration;

        return $this;
    }

    /**
     * Gets date_deactivated
     *
     * @return int
     */
    public function getDateDeactivated()
    {
        return $this->container['date_deactivated'];
    }

    /**
     * Sets date_deactivated
     *
     * @param int $date_deactivated date_deactivated
     *
     * @return $this
     */
    public function setDateDeactivated($date_deactivated)
    {
        $this->container['date_deactivated'] = $date_deactivated;

        return $this;
    }

    /**
     * Gets deactivated
     *
     * @return bool
     */
    public function getDeactivated()
    {
        return $this->container['deactivated'];
    }

    /**
     * Sets deactivated
     *
     * @param bool $deactivated deactivated
     *
     * @return $this
     */
    public function setDeactivated($deactivated)
    {
        $this->container['deactivated'] = $deactivated;

        return $this;
    }

    /**
     * Gets reason_deactivated
     *
     * @return string
     */
    public function getReasonDeactivated()
    {
        return $this->container['reason_deactivated'];
    }

    /**
     * Sets reason_deactivated
     *
     * @param string $reason_deactivated reason_deactivated
     *
     * @return $this
     */
    public function setReasonDeactivated($reason_deactivated)
    {
        $this->container['reason_deactivated'] = $reason_deactivated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
