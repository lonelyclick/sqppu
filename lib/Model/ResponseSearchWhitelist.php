<?php
/**
 * ResponseSearchWhitelist
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Distributor PPU Service
 *
 * Â© KnowRoaming LTD 2017
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponseSearchWhitelist Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseSearchWhitelist implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResponseSearchWhitelist';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'whitelist_id' => 'int',
'ocs_whitelist_id' => 'int',
'distributor_id' => 'int',
'whitelist_path' => 'string',
'name' => 'string',
'user_inventory_id' => 'int',
'user_inventory_name' => 'string',
'user_inventory_type' => 'string',
'owner_inventory_id' => 'int',
'owner_inventory_name' => 'string',
'create_epoch_milli' => 'int',
'modify_epoch_milli' => 'int',
'parent_whitelist_id' => 'int',
'parent_whitelist_name' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'whitelist_id' => 'int32',
'ocs_whitelist_id' => 'int32',
'distributor_id' => 'int32',
'whitelist_path' => null,
'name' => null,
'user_inventory_id' => 'int32',
'user_inventory_name' => null,
'user_inventory_type' => null,
'owner_inventory_id' => 'int32',
'owner_inventory_name' => null,
'create_epoch_milli' => 'int64',
'modify_epoch_milli' => 'int64',
'parent_whitelist_id' => 'int32',
'parent_whitelist_name' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'whitelist_id' => 'whitelist_id',
'ocs_whitelist_id' => 'ocs_whitelist_id',
'distributor_id' => 'distributor_id',
'whitelist_path' => 'whitelist_path',
'name' => 'name',
'user_inventory_id' => 'user_inventory_id',
'user_inventory_name' => 'user_inventory_name',
'user_inventory_type' => 'user_inventory_type',
'owner_inventory_id' => 'owner_inventory_id',
'owner_inventory_name' => 'owner_inventory_name',
'create_epoch_milli' => 'create_epoch_milli',
'modify_epoch_milli' => 'modify_epoch_milli',
'parent_whitelist_id' => 'parent_whitelist_id',
'parent_whitelist_name' => 'parent_whitelist_name'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'whitelist_id' => 'setWhitelistId',
'ocs_whitelist_id' => 'setOcsWhitelistId',
'distributor_id' => 'setDistributorId',
'whitelist_path' => 'setWhitelistPath',
'name' => 'setName',
'user_inventory_id' => 'setUserInventoryId',
'user_inventory_name' => 'setUserInventoryName',
'user_inventory_type' => 'setUserInventoryType',
'owner_inventory_id' => 'setOwnerInventoryId',
'owner_inventory_name' => 'setOwnerInventoryName',
'create_epoch_milli' => 'setCreateEpochMilli',
'modify_epoch_milli' => 'setModifyEpochMilli',
'parent_whitelist_id' => 'setParentWhitelistId',
'parent_whitelist_name' => 'setParentWhitelistName'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'whitelist_id' => 'getWhitelistId',
'ocs_whitelist_id' => 'getOcsWhitelistId',
'distributor_id' => 'getDistributorId',
'whitelist_path' => 'getWhitelistPath',
'name' => 'getName',
'user_inventory_id' => 'getUserInventoryId',
'user_inventory_name' => 'getUserInventoryName',
'user_inventory_type' => 'getUserInventoryType',
'owner_inventory_id' => 'getOwnerInventoryId',
'owner_inventory_name' => 'getOwnerInventoryName',
'create_epoch_milli' => 'getCreateEpochMilli',
'modify_epoch_milli' => 'getModifyEpochMilli',
'parent_whitelist_id' => 'getParentWhitelistId',
'parent_whitelist_name' => 'getParentWhitelistName'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['whitelist_id'] = isset($data['whitelist_id']) ? $data['whitelist_id'] : null;
        $this->container['ocs_whitelist_id'] = isset($data['ocs_whitelist_id']) ? $data['ocs_whitelist_id'] : null;
        $this->container['distributor_id'] = isset($data['distributor_id']) ? $data['distributor_id'] : null;
        $this->container['whitelist_path'] = isset($data['whitelist_path']) ? $data['whitelist_path'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['user_inventory_id'] = isset($data['user_inventory_id']) ? $data['user_inventory_id'] : null;
        $this->container['user_inventory_name'] = isset($data['user_inventory_name']) ? $data['user_inventory_name'] : null;
        $this->container['user_inventory_type'] = isset($data['user_inventory_type']) ? $data['user_inventory_type'] : null;
        $this->container['owner_inventory_id'] = isset($data['owner_inventory_id']) ? $data['owner_inventory_id'] : null;
        $this->container['owner_inventory_name'] = isset($data['owner_inventory_name']) ? $data['owner_inventory_name'] : null;
        $this->container['create_epoch_milli'] = isset($data['create_epoch_milli']) ? $data['create_epoch_milli'] : null;
        $this->container['modify_epoch_milli'] = isset($data['modify_epoch_milli']) ? $data['modify_epoch_milli'] : null;
        $this->container['parent_whitelist_id'] = isset($data['parent_whitelist_id']) ? $data['parent_whitelist_id'] : null;
        $this->container['parent_whitelist_name'] = isset($data['parent_whitelist_name']) ? $data['parent_whitelist_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets whitelist_id
     *
     * @return int
     */
    public function getWhitelistId()
    {
        return $this->container['whitelist_id'];
    }

    /**
     * Sets whitelist_id
     *
     * @param int $whitelist_id whitelist_id
     *
     * @return $this
     */
    public function setWhitelistId($whitelist_id)
    {
        $this->container['whitelist_id'] = $whitelist_id;

        return $this;
    }

    /**
     * Gets ocs_whitelist_id
     *
     * @return int
     */
    public function getOcsWhitelistId()
    {
        return $this->container['ocs_whitelist_id'];
    }

    /**
     * Sets ocs_whitelist_id
     *
     * @param int $ocs_whitelist_id ocs_whitelist_id
     *
     * @return $this
     */
    public function setOcsWhitelistId($ocs_whitelist_id)
    {
        $this->container['ocs_whitelist_id'] = $ocs_whitelist_id;

        return $this;
    }

    /**
     * Gets distributor_id
     *
     * @return int
     */
    public function getDistributorId()
    {
        return $this->container['distributor_id'];
    }

    /**
     * Sets distributor_id
     *
     * @param int $distributor_id distributor_id
     *
     * @return $this
     */
    public function setDistributorId($distributor_id)
    {
        $this->container['distributor_id'] = $distributor_id;

        return $this;
    }

    /**
     * Gets whitelist_path
     *
     * @return string
     */
    public function getWhitelistPath()
    {
        return $this->container['whitelist_path'];
    }

    /**
     * Sets whitelist_path
     *
     * @param string $whitelist_path whitelist_path
     *
     * @return $this
     */
    public function setWhitelistPath($whitelist_path)
    {
        $this->container['whitelist_path'] = $whitelist_path;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets user_inventory_id
     *
     * @return int
     */
    public function getUserInventoryId()
    {
        return $this->container['user_inventory_id'];
    }

    /**
     * Sets user_inventory_id
     *
     * @param int $user_inventory_id user_inventory_id
     *
     * @return $this
     */
    public function setUserInventoryId($user_inventory_id)
    {
        $this->container['user_inventory_id'] = $user_inventory_id;

        return $this;
    }

    /**
     * Gets user_inventory_name
     *
     * @return string
     */
    public function getUserInventoryName()
    {
        return $this->container['user_inventory_name'];
    }

    /**
     * Sets user_inventory_name
     *
     * @param string $user_inventory_name user_inventory_name
     *
     * @return $this
     */
    public function setUserInventoryName($user_inventory_name)
    {
        $this->container['user_inventory_name'] = $user_inventory_name;

        return $this;
    }

    /**
     * Gets user_inventory_type
     *
     * @return string
     */
    public function getUserInventoryType()
    {
        return $this->container['user_inventory_type'];
    }

    /**
     * Sets user_inventory_type
     *
     * @param string $user_inventory_type user_inventory_type
     *
     * @return $this
     */
    public function setUserInventoryType($user_inventory_type)
    {
        $this->container['user_inventory_type'] = $user_inventory_type;

        return $this;
    }

    /**
     * Gets owner_inventory_id
     *
     * @return int
     */
    public function getOwnerInventoryId()
    {
        return $this->container['owner_inventory_id'];
    }

    /**
     * Sets owner_inventory_id
     *
     * @param int $owner_inventory_id owner_inventory_id
     *
     * @return $this
     */
    public function setOwnerInventoryId($owner_inventory_id)
    {
        $this->container['owner_inventory_id'] = $owner_inventory_id;

        return $this;
    }

    /**
     * Gets owner_inventory_name
     *
     * @return string
     */
    public function getOwnerInventoryName()
    {
        return $this->container['owner_inventory_name'];
    }

    /**
     * Sets owner_inventory_name
     *
     * @param string $owner_inventory_name owner_inventory_name
     *
     * @return $this
     */
    public function setOwnerInventoryName($owner_inventory_name)
    {
        $this->container['owner_inventory_name'] = $owner_inventory_name;

        return $this;
    }

    /**
     * Gets create_epoch_milli
     *
     * @return int
     */
    public function getCreateEpochMilli()
    {
        return $this->container['create_epoch_milli'];
    }

    /**
     * Sets create_epoch_milli
     *
     * @param int $create_epoch_milli create_epoch_milli
     *
     * @return $this
     */
    public function setCreateEpochMilli($create_epoch_milli)
    {
        $this->container['create_epoch_milli'] = $create_epoch_milli;

        return $this;
    }

    /**
     * Gets modify_epoch_milli
     *
     * @return int
     */
    public function getModifyEpochMilli()
    {
        return $this->container['modify_epoch_milli'];
    }

    /**
     * Sets modify_epoch_milli
     *
     * @param int $modify_epoch_milli modify_epoch_milli
     *
     * @return $this
     */
    public function setModifyEpochMilli($modify_epoch_milli)
    {
        $this->container['modify_epoch_milli'] = $modify_epoch_milli;

        return $this;
    }

    /**
     * Gets parent_whitelist_id
     *
     * @return int
     */
    public function getParentWhitelistId()
    {
        return $this->container['parent_whitelist_id'];
    }

    /**
     * Sets parent_whitelist_id
     *
     * @param int $parent_whitelist_id parent_whitelist_id
     *
     * @return $this
     */
    public function setParentWhitelistId($parent_whitelist_id)
    {
        $this->container['parent_whitelist_id'] = $parent_whitelist_id;

        return $this;
    }

    /**
     * Gets parent_whitelist_name
     *
     * @return string
     */
    public function getParentWhitelistName()
    {
        return $this->container['parent_whitelist_name'];
    }

    /**
     * Sets parent_whitelist_name
     *
     * @param string $parent_whitelist_name parent_whitelist_name
     *
     * @return $this
     */
    public function setParentWhitelistName($parent_whitelist_name)
    {
        $this->container['parent_whitelist_name'] = $parent_whitelist_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
