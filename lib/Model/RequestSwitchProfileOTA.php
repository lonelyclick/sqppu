<?php
/**
 * RequestSwitchProfileOTA
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Distributor PPU Service
 *
 * Â© KnowRoaming LTD 2017
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RequestSwitchProfileOTA Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RequestSwitchProfileOTA implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RequestSwitchProfileOTA';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sim_profile' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sim_profile' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sim_profile' => 'simProfile'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sim_profile' => 'setSimProfile'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sim_profile' => 'getSimProfile'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SIM_PROFILE_SLOT1 = 'SLOT1';
const SIM_PROFILE_SLOT2 = 'SLOT2';
const SIM_PROFILE_SLOT3 = 'SLOT3';
const SIM_PROFILE_SLOT4 = 'SLOT4';
const SIM_PROFILE_SLOT5 = 'SLOT5';
const SIM_PROFILE_SLOT6 = 'SLOT6';
const SIM_PROFILE_SLOT7 = 'SLOT7';
const SIM_PROFILE_SLOT8 = 'SLOT8';
const SIM_PROFILE_SLOT9 = 'SLOT9';
const SIM_PROFILE_SLOT10 = 'SLOT10';
const SIM_PROFILE_SLOT11 = 'SLOT11';
const SIM_PROFILE_SLOT12 = 'SLOT12';
const SIM_PROFILE_SLOT13 = 'SLOT13';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSimProfileAllowableValues()
    {
        return [
            self::SIM_PROFILE_SLOT1,
self::SIM_PROFILE_SLOT2,
self::SIM_PROFILE_SLOT3,
self::SIM_PROFILE_SLOT4,
self::SIM_PROFILE_SLOT5,
self::SIM_PROFILE_SLOT6,
self::SIM_PROFILE_SLOT7,
self::SIM_PROFILE_SLOT8,
self::SIM_PROFILE_SLOT9,
self::SIM_PROFILE_SLOT10,
self::SIM_PROFILE_SLOT11,
self::SIM_PROFILE_SLOT12,
self::SIM_PROFILE_SLOT13,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sim_profile'] = isset($data['sim_profile']) ? $data['sim_profile'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sim_profile'] === null) {
            $invalidProperties[] = "'sim_profile' can't be null";
        }
        $allowedValues = $this->getSimProfileAllowableValues();
        if (!is_null($this->container['sim_profile']) && !in_array($this->container['sim_profile'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sim_profile', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sim_profile
     *
     * @return string
     */
    public function getSimProfile()
    {
        return $this->container['sim_profile'];
    }

    /**
     * Sets sim_profile
     *
     * @param string $sim_profile The SIM profile to be switched to
     *
     * @return $this
     */
    public function setSimProfile($sim_profile)
    {
        $allowedValues = $this->getSimProfileAllowableValues();
        if (!in_array($sim_profile, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sim_profile', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sim_profile'] = $sim_profile;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
