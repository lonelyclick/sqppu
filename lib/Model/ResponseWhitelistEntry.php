<?php
/**
 * ResponseWhitelistEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Distributor PPU Service
 *
 * Â© KnowRoaming LTD 2017
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponseWhitelistEntry Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseWhitelistEntry implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResponseWhitelistEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'whitelist_id' => 'int',
'country_name' => 'string',
'country_iso2' => 'string',
'country_iso3' => 'string',
'sponsor_imsi_id' => 'int',
'network_id' => 'int',
'network_name' => 'string',
'voice_status' => 'string',
'sms_status' => 'string',
'data_status' => 'string',
'lte' => 'bool',
'voice_status_options' => 'string[]',
'sms_status_options' => 'string[]',
'data_status_options' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'whitelist_id' => 'int32',
'country_name' => null,
'country_iso2' => null,
'country_iso3' => null,
'sponsor_imsi_id' => 'int32',
'network_id' => 'int32',
'network_name' => null,
'voice_status' => null,
'sms_status' => null,
'data_status' => null,
'lte' => null,
'voice_status_options' => null,
'sms_status_options' => null,
'data_status_options' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'whitelist_id' => 'whitelistId',
'country_name' => 'countryName',
'country_iso2' => 'countryIso2',
'country_iso3' => 'countryIso3',
'sponsor_imsi_id' => 'sponsorImsiId',
'network_id' => 'networkId',
'network_name' => 'networkName',
'voice_status' => 'voiceStatus',
'sms_status' => 'smsStatus',
'data_status' => 'dataStatus',
'lte' => 'lte',
'voice_status_options' => 'voiceStatusOptions',
'sms_status_options' => 'smsStatusOptions',
'data_status_options' => 'dataStatusOptions'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'whitelist_id' => 'setWhitelistId',
'country_name' => 'setCountryName',
'country_iso2' => 'setCountryIso2',
'country_iso3' => 'setCountryIso3',
'sponsor_imsi_id' => 'setSponsorImsiId',
'network_id' => 'setNetworkId',
'network_name' => 'setNetworkName',
'voice_status' => 'setVoiceStatus',
'sms_status' => 'setSmsStatus',
'data_status' => 'setDataStatus',
'lte' => 'setLte',
'voice_status_options' => 'setVoiceStatusOptions',
'sms_status_options' => 'setSmsStatusOptions',
'data_status_options' => 'setDataStatusOptions'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'whitelist_id' => 'getWhitelistId',
'country_name' => 'getCountryName',
'country_iso2' => 'getCountryIso2',
'country_iso3' => 'getCountryIso3',
'sponsor_imsi_id' => 'getSponsorImsiId',
'network_id' => 'getNetworkId',
'network_name' => 'getNetworkName',
'voice_status' => 'getVoiceStatus',
'sms_status' => 'getSmsStatus',
'data_status' => 'getDataStatus',
'lte' => 'getLte',
'voice_status_options' => 'getVoiceStatusOptions',
'sms_status_options' => 'getSmsStatusOptions',
'data_status_options' => 'getDataStatusOptions'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const VOICE_STATUS_DIRECT = 'DIRECT';
const VOICE_STATUS_CALLBACK = 'CALLBACK';
const VOICE_STATUS_PILOT = 'PILOT';
const VOICE_STATUS_BLOCKED = 'BLOCKED';
const SMS_STATUS_ALLOWED = 'ALLOWED';
const SMS_STATUS_BLOCKED = 'BLOCKED';
const DATA_STATUS_ALLOWED = 'ALLOWED';
const DATA_STATUS_BLOCKED = 'BLOCKED';
const VOICE_STATUS_OPTIONS_DIRECT = 'DIRECT';
const VOICE_STATUS_OPTIONS_CALLBACK = 'CALLBACK';
const VOICE_STATUS_OPTIONS_PILOT = 'PILOT';
const VOICE_STATUS_OPTIONS_BLOCKED = 'BLOCKED';
const SMS_STATUS_OPTIONS_ALLOWED = 'ALLOWED';
const SMS_STATUS_OPTIONS_BLOCKED = 'BLOCKED';
const DATA_STATUS_OPTIONS_ALLOWED = 'ALLOWED';
const DATA_STATUS_OPTIONS_BLOCKED = 'BLOCKED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVoiceStatusAllowableValues()
    {
        return [
            self::VOICE_STATUS_DIRECT,
self::VOICE_STATUS_CALLBACK,
self::VOICE_STATUS_PILOT,
self::VOICE_STATUS_BLOCKED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSmsStatusAllowableValues()
    {
        return [
            self::SMS_STATUS_ALLOWED,
self::SMS_STATUS_BLOCKED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDataStatusAllowableValues()
    {
        return [
            self::DATA_STATUS_ALLOWED,
self::DATA_STATUS_BLOCKED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVoiceStatusOptionsAllowableValues()
    {
        return [
            self::VOICE_STATUS_OPTIONS_DIRECT,
self::VOICE_STATUS_OPTIONS_CALLBACK,
self::VOICE_STATUS_OPTIONS_PILOT,
self::VOICE_STATUS_OPTIONS_BLOCKED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSmsStatusOptionsAllowableValues()
    {
        return [
            self::SMS_STATUS_OPTIONS_ALLOWED,
self::SMS_STATUS_OPTIONS_BLOCKED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDataStatusOptionsAllowableValues()
    {
        return [
            self::DATA_STATUS_OPTIONS_ALLOWED,
self::DATA_STATUS_OPTIONS_BLOCKED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['whitelist_id'] = isset($data['whitelist_id']) ? $data['whitelist_id'] : null;
        $this->container['country_name'] = isset($data['country_name']) ? $data['country_name'] : null;
        $this->container['country_iso2'] = isset($data['country_iso2']) ? $data['country_iso2'] : null;
        $this->container['country_iso3'] = isset($data['country_iso3']) ? $data['country_iso3'] : null;
        $this->container['sponsor_imsi_id'] = isset($data['sponsor_imsi_id']) ? $data['sponsor_imsi_id'] : null;
        $this->container['network_id'] = isset($data['network_id']) ? $data['network_id'] : null;
        $this->container['network_name'] = isset($data['network_name']) ? $data['network_name'] : null;
        $this->container['voice_status'] = isset($data['voice_status']) ? $data['voice_status'] : null;
        $this->container['sms_status'] = isset($data['sms_status']) ? $data['sms_status'] : null;
        $this->container['data_status'] = isset($data['data_status']) ? $data['data_status'] : null;
        $this->container['lte'] = isset($data['lte']) ? $data['lte'] : false;
        $this->container['voice_status_options'] = isset($data['voice_status_options']) ? $data['voice_status_options'] : null;
        $this->container['sms_status_options'] = isset($data['sms_status_options']) ? $data['sms_status_options'] : null;
        $this->container['data_status_options'] = isset($data['data_status_options']) ? $data['data_status_options'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['whitelist_id'] === null) {
            $invalidProperties[] = "'whitelist_id' can't be null";
        }
        if ($this->container['country_name'] === null) {
            $invalidProperties[] = "'country_name' can't be null";
        }
        if ($this->container['country_iso2'] === null) {
            $invalidProperties[] = "'country_iso2' can't be null";
        }
        if ($this->container['country_iso3'] === null) {
            $invalidProperties[] = "'country_iso3' can't be null";
        }
        if ($this->container['sponsor_imsi_id'] === null) {
            $invalidProperties[] = "'sponsor_imsi_id' can't be null";
        }
        if ($this->container['network_id'] === null) {
            $invalidProperties[] = "'network_id' can't be null";
        }
        if ($this->container['network_name'] === null) {
            $invalidProperties[] = "'network_name' can't be null";
        }
        if ($this->container['voice_status'] === null) {
            $invalidProperties[] = "'voice_status' can't be null";
        }
        $allowedValues = $this->getVoiceStatusAllowableValues();
        if (!is_null($this->container['voice_status']) && !in_array($this->container['voice_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'voice_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['sms_status'] === null) {
            $invalidProperties[] = "'sms_status' can't be null";
        }
        $allowedValues = $this->getSmsStatusAllowableValues();
        if (!is_null($this->container['sms_status']) && !in_array($this->container['sms_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sms_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['data_status'] === null) {
            $invalidProperties[] = "'data_status' can't be null";
        }
        $allowedValues = $this->getDataStatusAllowableValues();
        if (!is_null($this->container['data_status']) && !in_array($this->container['data_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'data_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['lte'] === null) {
            $invalidProperties[] = "'lte' can't be null";
        }
        if ($this->container['voice_status_options'] === null) {
            $invalidProperties[] = "'voice_status_options' can't be null";
        }
        if ($this->container['sms_status_options'] === null) {
            $invalidProperties[] = "'sms_status_options' can't be null";
        }
        if ($this->container['data_status_options'] === null) {
            $invalidProperties[] = "'data_status_options' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets whitelist_id
     *
     * @return int
     */
    public function getWhitelistId()
    {
        return $this->container['whitelist_id'];
    }

    /**
     * Sets whitelist_id
     *
     * @param int $whitelist_id The unique identifier of a whitelist entry
     *
     * @return $this
     */
    public function setWhitelistId($whitelist_id)
    {
        $this->container['whitelist_id'] = $whitelist_id;

        return $this;
    }

    /**
     * Gets country_name
     *
     * @return string
     */
    public function getCountryName()
    {
        return $this->container['country_name'];
    }

    /**
     * Sets country_name
     *
     * @param string $country_name The country name for this whitelist entry
     *
     * @return $this
     */
    public function setCountryName($country_name)
    {
        $this->container['country_name'] = $country_name;

        return $this;
    }

    /**
     * Gets country_iso2
     *
     * @return string
     */
    public function getCountryIso2()
    {
        return $this->container['country_iso2'];
    }

    /**
     * Sets country_iso2
     *
     * @param string $country_iso2 The country iso2
     *
     * @return $this
     */
    public function setCountryIso2($country_iso2)
    {
        $this->container['country_iso2'] = $country_iso2;

        return $this;
    }

    /**
     * Gets country_iso3
     *
     * @return string
     */
    public function getCountryIso3()
    {
        return $this->container['country_iso3'];
    }

    /**
     * Sets country_iso3
     *
     * @param string $country_iso3 The country iso3
     *
     * @return $this
     */
    public function setCountryIso3($country_iso3)
    {
        $this->container['country_iso3'] = $country_iso3;

        return $this;
    }

    /**
     * Gets sponsor_imsi_id
     *
     * @return int
     */
    public function getSponsorImsiId()
    {
        return $this->container['sponsor_imsi_id'];
    }

    /**
     * Sets sponsor_imsi_id
     *
     * @param int $sponsor_imsi_id The IMSI profile for this whitelist entry
     *
     * @return $this
     */
    public function setSponsorImsiId($sponsor_imsi_id)
    {
        $this->container['sponsor_imsi_id'] = $sponsor_imsi_id;

        return $this;
    }

    /**
     * Gets network_id
     *
     * @return int
     */
    public function getNetworkId()
    {
        return $this->container['network_id'];
    }

    /**
     * Sets network_id
     *
     * @param int $network_id The network id
     *
     * @return $this
     */
    public function setNetworkId($network_id)
    {
        $this->container['network_id'] = $network_id;

        return $this;
    }

    /**
     * Gets network_name
     *
     * @return string
     */
    public function getNetworkName()
    {
        return $this->container['network_name'];
    }

    /**
     * Sets network_name
     *
     * @param string $network_name The network name
     *
     * @return $this
     */
    public function setNetworkName($network_name)
    {
        $this->container['network_name'] = $network_name;

        return $this;
    }

    /**
     * Gets voice_status
     *
     * @return string
     */
    public function getVoiceStatus()
    {
        return $this->container['voice_status'];
    }

    /**
     * Sets voice_status
     *
     * @param string $voice_status The status of the voice service
     *
     * @return $this
     */
    public function setVoiceStatus($voice_status)
    {
        $allowedValues = $this->getVoiceStatusAllowableValues();
        if (!in_array($voice_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'voice_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['voice_status'] = $voice_status;

        return $this;
    }

    /**
     * Gets sms_status
     *
     * @return string
     */
    public function getSmsStatus()
    {
        return $this->container['sms_status'];
    }

    /**
     * Sets sms_status
     *
     * @param string $sms_status The status of the SMS service
     *
     * @return $this
     */
    public function setSmsStatus($sms_status)
    {
        $allowedValues = $this->getSmsStatusAllowableValues();
        if (!in_array($sms_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sms_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sms_status'] = $sms_status;

        return $this;
    }

    /**
     * Gets data_status
     *
     * @return string
     */
    public function getDataStatus()
    {
        return $this->container['data_status'];
    }

    /**
     * Sets data_status
     *
     * @param string $data_status The status of the data service
     *
     * @return $this
     */
    public function setDataStatus($data_status)
    {
        $allowedValues = $this->getDataStatusAllowableValues();
        if (!in_array($data_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'data_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['data_status'] = $data_status;

        return $this;
    }

    /**
     * Gets lte
     *
     * @return bool
     */
    public function getLte()
    {
        return $this->container['lte'];
    }

    /**
     * Sets lte
     *
     * @param bool $lte A flag that says if the network is LTE
     *
     * @return $this
     */
    public function setLte($lte)
    {
        $this->container['lte'] = $lte;

        return $this;
    }

    /**
     * Gets voice_status_options
     *
     * @return string[]
     */
    public function getVoiceStatusOptions()
    {
        return $this->container['voice_status_options'];
    }

    /**
     * Sets voice_status_options
     *
     * @param string[] $voice_status_options Voice status options
     *
     * @return $this
     */
    public function setVoiceStatusOptions($voice_status_options)
    {
        $allowedValues = $this->getVoiceStatusOptionsAllowableValues();
        if (array_diff($voice_status_options, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'voice_status_options', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['voice_status_options'] = $voice_status_options;

        return $this;
    }

    /**
     * Gets sms_status_options
     *
     * @return string[]
     */
    public function getSmsStatusOptions()
    {
        return $this->container['sms_status_options'];
    }

    /**
     * Sets sms_status_options
     *
     * @param string[] $sms_status_options SMS status options
     *
     * @return $this
     */
    public function setSmsStatusOptions($sms_status_options)
    {
        $allowedValues = $this->getSmsStatusOptionsAllowableValues();
        if (array_diff($sms_status_options, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sms_status_options', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sms_status_options'] = $sms_status_options;

        return $this;
    }

    /**
     * Gets data_status_options
     *
     * @return string[]
     */
    public function getDataStatusOptions()
    {
        return $this->container['data_status_options'];
    }

    /**
     * Sets data_status_options
     *
     * @param string[] $data_status_options Data status options
     *
     * @return $this
     */
    public function setDataStatusOptions($data_status_options)
    {
        $allowedValues = $this->getDataStatusOptionsAllowableValues();
        if (array_diff($data_status_options, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'data_status_options', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['data_status_options'] = $data_status_options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
