<?php
/**
 * RequestInventorySim
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Distributor PPU Service
 *
 * Â© KnowRoaming LTD 2017
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RequestInventorySim Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RequestInventorySim implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RequestInventorySim';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'iccid' => 'string',
'ki' => 'string',
'opc' => 'string',
'imsi_mapped' => '\Swagger\Client\Model\RequestInventorySimImsi',
'sponsored_imsis' => '\Swagger\Client\Model\RequestInventorySimImsi[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'iccid' => null,
'ki' => null,
'opc' => null,
'imsi_mapped' => null,
'sponsored_imsis' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'iccid' => 'iccid',
'ki' => 'ki',
'opc' => 'opc',
'imsi_mapped' => 'imsiMapped',
'sponsored_imsis' => 'sponsoredImsis'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'iccid' => 'setIccid',
'ki' => 'setKi',
'opc' => 'setOpc',
'imsi_mapped' => 'setImsiMapped',
'sponsored_imsis' => 'setSponsoredImsis'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'iccid' => 'getIccid',
'ki' => 'getKi',
'opc' => 'getOpc',
'imsi_mapped' => 'getImsiMapped',
'sponsored_imsis' => 'getSponsoredImsis'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['iccid'] = isset($data['iccid']) ? $data['iccid'] : null;
        $this->container['ki'] = isset($data['ki']) ? $data['ki'] : null;
        $this->container['opc'] = isset($data['opc']) ? $data['opc'] : null;
        $this->container['imsi_mapped'] = isset($data['imsi_mapped']) ? $data['imsi_mapped'] : null;
        $this->container['sponsored_imsis'] = isset($data['sponsored_imsis']) ? $data['sponsored_imsis'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['iccid'] === null) {
            $invalidProperties[] = "'iccid' can't be null";
        }
        if ($this->container['ki'] === null) {
            $invalidProperties[] = "'ki' can't be null";
        }
        if ($this->container['opc'] === null) {
            $invalidProperties[] = "'opc' can't be null";
        }
        if ($this->container['imsi_mapped'] === null) {
            $invalidProperties[] = "'imsi_mapped' can't be null";
        }
        if ($this->container['sponsored_imsis'] === null) {
            $invalidProperties[] = "'sponsored_imsis' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets iccid
     *
     * @return string
     */
    public function getIccid()
    {
        return $this->container['iccid'];
    }

    /**
     * Sets iccid
     *
     * @param string $iccid The unique identifier of a SIM
     *
     * @return $this
     */
    public function setIccid($iccid)
    {
        $this->container['iccid'] = $iccid;

        return $this;
    }

    /**
     * Gets ki
     *
     * @return string
     */
    public function getKi()
    {
        return $this->container['ki'];
    }

    /**
     * Sets ki
     *
     * @param string $ki Authentication key of a SIM
     *
     * @return $this
     */
    public function setKi($ki)
    {
        $this->container['ki'] = $ki;

        return $this;
    }

    /**
     * Gets opc
     *
     * @return string
     */
    public function getOpc()
    {
        return $this->container['opc'];
    }

    /**
     * Sets opc
     *
     * @param string $opc OPC of a SIM
     *
     * @return $this
     */
    public function setOpc($opc)
    {
        $this->container['opc'] = $opc;

        return $this;
    }

    /**
     * Gets imsi_mapped
     *
     * @return \Swagger\Client\Model\RequestInventorySimImsi
     */
    public function getImsiMapped()
    {
        return $this->container['imsi_mapped'];
    }

    /**
     * Sets imsi_mapped
     *
     * @param \Swagger\Client\Model\RequestInventorySimImsi $imsi_mapped imsi_mapped
     *
     * @return $this
     */
    public function setImsiMapped($imsi_mapped)
    {
        $this->container['imsi_mapped'] = $imsi_mapped;

        return $this;
    }

    /**
     * Gets sponsored_imsis
     *
     * @return \Swagger\Client\Model\RequestInventorySimImsi[]
     */
    public function getSponsoredImsis()
    {
        return $this->container['sponsored_imsis'];
    }

    /**
     * Sets sponsored_imsis
     *
     * @param \Swagger\Client\Model\RequestInventorySimImsi[] $sponsored_imsis List of IMSIs assigned to the SIM
     *
     * @return $this
     */
    public function setSponsoredImsis($sponsored_imsis)
    {
        $this->container['sponsored_imsis'] = $sponsored_imsis;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
