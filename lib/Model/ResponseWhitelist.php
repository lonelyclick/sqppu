<?php
/**
 * ResponseWhitelist
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Distributor PPU Service
 *
 * Â© KnowRoaming LTD 2017
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponseWhitelist Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseWhitelist implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResponseWhitelist';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'whitelist_id' => 'int',
'name' => 'string',
'user_inventory_id' => 'int',
'owner_inventory_id' => 'int',
'parent_whitelist_id' => 'int',
'epoch_created' => 'int',
'epoch_modified' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'whitelist_id' => 'int32',
'name' => null,
'user_inventory_id' => 'int32',
'owner_inventory_id' => 'int32',
'parent_whitelist_id' => 'int32',
'epoch_created' => 'int64',
'epoch_modified' => 'int64'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'whitelist_id' => 'whitelistId',
'name' => 'name',
'user_inventory_id' => 'userInventoryId',
'owner_inventory_id' => 'ownerInventoryId',
'parent_whitelist_id' => 'parentWhitelistId',
'epoch_created' => 'epochCreated',
'epoch_modified' => 'epochModified'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'whitelist_id' => 'setWhitelistId',
'name' => 'setName',
'user_inventory_id' => 'setUserInventoryId',
'owner_inventory_id' => 'setOwnerInventoryId',
'parent_whitelist_id' => 'setParentWhitelistId',
'epoch_created' => 'setEpochCreated',
'epoch_modified' => 'setEpochModified'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'whitelist_id' => 'getWhitelistId',
'name' => 'getName',
'user_inventory_id' => 'getUserInventoryId',
'owner_inventory_id' => 'getOwnerInventoryId',
'parent_whitelist_id' => 'getParentWhitelistId',
'epoch_created' => 'getEpochCreated',
'epoch_modified' => 'getEpochModified'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['whitelist_id'] = isset($data['whitelist_id']) ? $data['whitelist_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['user_inventory_id'] = isset($data['user_inventory_id']) ? $data['user_inventory_id'] : null;
        $this->container['owner_inventory_id'] = isset($data['owner_inventory_id']) ? $data['owner_inventory_id'] : null;
        $this->container['parent_whitelist_id'] = isset($data['parent_whitelist_id']) ? $data['parent_whitelist_id'] : null;
        $this->container['epoch_created'] = isset($data['epoch_created']) ? $data['epoch_created'] : null;
        $this->container['epoch_modified'] = isset($data['epoch_modified']) ? $data['epoch_modified'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets whitelist_id
     *
     * @return int
     */
    public function getWhitelistId()
    {
        return $this->container['whitelist_id'];
    }

    /**
     * Sets whitelist_id
     *
     * @param int $whitelist_id The unique identified of the Whitelist
     *
     * @return $this
     */
    public function setWhitelistId($whitelist_id)
    {
        $this->container['whitelist_id'] = $whitelist_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of this Whitelist
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets user_inventory_id
     *
     * @return int
     */
    public function getUserInventoryId()
    {
        return $this->container['user_inventory_id'];
    }

    /**
     * Sets user_inventory_id
     *
     * @param int $user_inventory_id The Inventory ID that is allowed to use this Whitelist
     *
     * @return $this
     */
    public function setUserInventoryId($user_inventory_id)
    {
        $this->container['user_inventory_id'] = $user_inventory_id;

        return $this;
    }

    /**
     * Gets owner_inventory_id
     *
     * @return int
     */
    public function getOwnerInventoryId()
    {
        return $this->container['owner_inventory_id'];
    }

    /**
     * Sets owner_inventory_id
     *
     * @param int $owner_inventory_id The Inventory ID that is allowed to modify this Whitelist
     *
     * @return $this
     */
    public function setOwnerInventoryId($owner_inventory_id)
    {
        $this->container['owner_inventory_id'] = $owner_inventory_id;

        return $this;
    }

    /**
     * Gets parent_whitelist_id
     *
     * @return int
     */
    public function getParentWhitelistId()
    {
        return $this->container['parent_whitelist_id'];
    }

    /**
     * Sets parent_whitelist_id
     *
     * @param int $parent_whitelist_id The Whitelist ID that is the parent of this Whitelist
     *
     * @return $this
     */
    public function setParentWhitelistId($parent_whitelist_id)
    {
        $this->container['parent_whitelist_id'] = $parent_whitelist_id;

        return $this;
    }

    /**
     * Gets epoch_created
     *
     * @return int
     */
    public function getEpochCreated()
    {
        return $this->container['epoch_created'];
    }

    /**
     * Sets epoch_created
     *
     * @param int $epoch_created The timestamp when this Whitelist was created
     *
     * @return $this
     */
    public function setEpochCreated($epoch_created)
    {
        $this->container['epoch_created'] = $epoch_created;

        return $this;
    }

    /**
     * Gets epoch_modified
     *
     * @return int
     */
    public function getEpochModified()
    {
        return $this->container['epoch_modified'];
    }

    /**
     * Sets epoch_modified
     *
     * @param int $epoch_modified The timestamp when this Whitelist was last modified
     *
     * @return $this
     */
    public function setEpochModified($epoch_modified)
    {
        $this->container['epoch_modified'] = $epoch_modified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
