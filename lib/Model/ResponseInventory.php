<?php
/**
 * ResponseInventory
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Distributor PPU Service
 *
 * Â© KnowRoaming LTD 2017
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponseInventory Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseInventory implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResponseInventory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'name' => 'string',
'note' => 'string',
'date_created_epoch' => 'int',
'date_modified_epoch' => 'int',
'date_deleted_epoch' => 'int',
'distributor_id' => 'int',
'parent_inventory_id' => 'int',
'ocs_group_id' => 'int',
'type' => 'string',
'status' => 'string',
'date_deactivated' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
'name' => null,
'note' => null,
'date_created_epoch' => 'int64',
'date_modified_epoch' => 'int64',
'date_deleted_epoch' => 'int64',
'distributor_id' => 'int32',
'parent_inventory_id' => 'int32',
'ocs_group_id' => 'int32',
'type' => null,
'status' => null,
'date_deactivated' => 'int64'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'note' => 'note',
'date_created_epoch' => 'dateCreatedEpoch',
'date_modified_epoch' => 'dateModifiedEpoch',
'date_deleted_epoch' => 'dateDeletedEpoch',
'distributor_id' => 'distributorId',
'parent_inventory_id' => 'parentInventoryId',
'ocs_group_id' => 'ocsGroupId',
'type' => 'type',
'status' => 'status',
'date_deactivated' => 'dateDeactivated'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'note' => 'setNote',
'date_created_epoch' => 'setDateCreatedEpoch',
'date_modified_epoch' => 'setDateModifiedEpoch',
'date_deleted_epoch' => 'setDateDeletedEpoch',
'distributor_id' => 'setDistributorId',
'parent_inventory_id' => 'setParentInventoryId',
'ocs_group_id' => 'setOcsGroupId',
'type' => 'setType',
'status' => 'setStatus',
'date_deactivated' => 'setDateDeactivated'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'note' => 'getNote',
'date_created_epoch' => 'getDateCreatedEpoch',
'date_modified_epoch' => 'getDateModifiedEpoch',
'date_deleted_epoch' => 'getDateDeletedEpoch',
'distributor_id' => 'getDistributorId',
'parent_inventory_id' => 'getParentInventoryId',
'ocs_group_id' => 'getOcsGroupId',
'type' => 'getType',
'status' => 'getStatus',
'date_deactivated' => 'getDateDeactivated'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_WHOLESALE = 'WHOLESALE';
const TYPE_T4_T = 'T4T';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_WHOLESALE,
self::TYPE_T4_T,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['date_created_epoch'] = isset($data['date_created_epoch']) ? $data['date_created_epoch'] : null;
        $this->container['date_modified_epoch'] = isset($data['date_modified_epoch']) ? $data['date_modified_epoch'] : null;
        $this->container['date_deleted_epoch'] = isset($data['date_deleted_epoch']) ? $data['date_deleted_epoch'] : null;
        $this->container['distributor_id'] = isset($data['distributor_id']) ? $data['distributor_id'] : null;
        $this->container['parent_inventory_id'] = isset($data['parent_inventory_id']) ? $data['parent_inventory_id'] : null;
        $this->container['ocs_group_id'] = isset($data['ocs_group_id']) ? $data['ocs_group_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['date_deactivated'] = isset($data['date_deactivated']) ? $data['date_deactivated'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['date_created_epoch'] === null) {
            $invalidProperties[] = "'date_created_epoch' can't be null";
        }
        if ($this->container['date_modified_epoch'] === null) {
            $invalidProperties[] = "'date_modified_epoch' can't be null";
        }
        if ($this->container['distributor_id'] === null) {
            $invalidProperties[] = "'distributor_id' can't be null";
        }
        if ($this->container['parent_inventory_id'] === null) {
            $invalidProperties[] = "'parent_inventory_id' can't be null";
        }
        if ($this->container['ocs_group_id'] === null) {
            $invalidProperties[] = "'ocs_group_id' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['date_deactivated'] === null) {
            $invalidProperties[] = "'date_deactivated' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique identifier of an inventory
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of an inventory
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note The note of an inventory
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets date_created_epoch
     *
     * @return int
     */
    public function getDateCreatedEpoch()
    {
        return $this->container['date_created_epoch'];
    }

    /**
     * Sets date_created_epoch
     *
     * @param int $date_created_epoch The created date of an inventory in epoch
     *
     * @return $this
     */
    public function setDateCreatedEpoch($date_created_epoch)
    {
        $this->container['date_created_epoch'] = $date_created_epoch;

        return $this;
    }

    /**
     * Gets date_modified_epoch
     *
     * @return int
     */
    public function getDateModifiedEpoch()
    {
        return $this->container['date_modified_epoch'];
    }

    /**
     * Sets date_modified_epoch
     *
     * @param int $date_modified_epoch Last modified date of an inventory in epoch
     *
     * @return $this
     */
    public function setDateModifiedEpoch($date_modified_epoch)
    {
        $this->container['date_modified_epoch'] = $date_modified_epoch;

        return $this;
    }

    /**
     * Gets date_deleted_epoch
     *
     * @return int
     */
    public function getDateDeletedEpoch()
    {
        return $this->container['date_deleted_epoch'];
    }

    /**
     * Sets date_deleted_epoch
     *
     * @param int $date_deleted_epoch Date when an inventory was deleted in epoch
     *
     * @return $this
     */
    public function setDateDeletedEpoch($date_deleted_epoch)
    {
        $this->container['date_deleted_epoch'] = $date_deleted_epoch;

        return $this;
    }

    /**
     * Gets distributor_id
     *
     * @return int
     */
    public function getDistributorId()
    {
        return $this->container['distributor_id'];
    }

    /**
     * Sets distributor_id
     *
     * @param int $distributor_id The unique identifier of the distributor
     *
     * @return $this
     */
    public function setDistributorId($distributor_id)
    {
        $this->container['distributor_id'] = $distributor_id;

        return $this;
    }

    /**
     * Gets parent_inventory_id
     *
     * @return int
     */
    public function getParentInventoryId()
    {
        return $this->container['parent_inventory_id'];
    }

    /**
     * Sets parent_inventory_id
     *
     * @param int $parent_inventory_id The unique identifier of the parent inventory
     *
     * @return $this
     */
    public function setParentInventoryId($parent_inventory_id)
    {
        $this->container['parent_inventory_id'] = $parent_inventory_id;

        return $this;
    }

    /**
     * Gets ocs_group_id
     *
     * @return int
     */
    public function getOcsGroupId()
    {
        return $this->container['ocs_group_id'];
    }

    /**
     * Sets ocs_group_id
     *
     * @param int $ocs_group_id The unique identifier of the Inventory in OCS
     *
     * @return $this
     */
    public function setOcsGroupId($ocs_group_id)
    {
        $this->container['ocs_group_id'] = $ocs_group_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The inventory type this inventory has. Cannot be changed. Defaults to WHOLESALE
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of an inventory
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets date_deactivated
     *
     * @return int
     */
    public function getDateDeactivated()
    {
        return $this->container['date_deactivated'];
    }

    /**
     * Sets date_deactivated
     *
     * @param int $date_deactivated The date when the inventory was deactivtaed in epoch
     *
     * @return $this
     */
    public function setDateDeactivated($date_deactivated)
    {
        $this->container['date_deactivated'] = $date_deactivated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
