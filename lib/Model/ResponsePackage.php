<?php
/**
 * ResponsePackage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Distributor PPU Service
 *
 * Â© KnowRoaming LTD 2017
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponsePackage Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponsePackage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResponsePackage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'package_id' => 'string',
'sim_iccid' => 'string',
'date_created' => 'int',
'date_expiry' => 'int',
'date_activated' => 'int',
'date_terminated' => 'int',
'window_activation_start' => 'int',
'window_activation_end' => 'int',
'status' => 'string',
'voice_usage_remaining_in_seconds' => 'int',
'data_usage_remaining_in_bytes' => 'int',
'sms_usage_remaining_in_nums' => 'int',
'package_type_id' => 'int',
'time_allowance_in_seconds' => 'int',
'dynamic_package_time_allowance' => '\Swagger\Client\Model\ResponseDynamicPackageTimeAllowance'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'package_id' => null,
'sim_iccid' => null,
'date_created' => 'int64',
'date_expiry' => 'int64',
'date_activated' => 'int64',
'date_terminated' => 'int64',
'window_activation_start' => 'int64',
'window_activation_end' => 'int64',
'status' => null,
'voice_usage_remaining_in_seconds' => 'int32',
'data_usage_remaining_in_bytes' => 'int64',
'sms_usage_remaining_in_nums' => 'int32',
'package_type_id' => 'int32',
'time_allowance_in_seconds' => 'int32',
'dynamic_package_time_allowance' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'package_id' => 'packageId',
'sim_iccid' => 'simIccid',
'date_created' => 'dateCreated',
'date_expiry' => 'dateExpiry',
'date_activated' => 'dateActivated',
'date_terminated' => 'dateTerminated',
'window_activation_start' => 'windowActivationStart',
'window_activation_end' => 'windowActivationEnd',
'status' => 'status',
'voice_usage_remaining_in_seconds' => 'voiceUsageRemainingInSeconds',
'data_usage_remaining_in_bytes' => 'dataUsageRemainingInBytes',
'sms_usage_remaining_in_nums' => 'smsUsageRemainingInNums',
'package_type_id' => 'packageTypeId',
'time_allowance_in_seconds' => 'timeAllowanceInSeconds',
'dynamic_package_time_allowance' => 'dynamicPackageTimeAllowance'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'package_id' => 'setPackageId',
'sim_iccid' => 'setSimIccid',
'date_created' => 'setDateCreated',
'date_expiry' => 'setDateExpiry',
'date_activated' => 'setDateActivated',
'date_terminated' => 'setDateTerminated',
'window_activation_start' => 'setWindowActivationStart',
'window_activation_end' => 'setWindowActivationEnd',
'status' => 'setStatus',
'voice_usage_remaining_in_seconds' => 'setVoiceUsageRemainingInSeconds',
'data_usage_remaining_in_bytes' => 'setDataUsageRemainingInBytes',
'sms_usage_remaining_in_nums' => 'setSmsUsageRemainingInNums',
'package_type_id' => 'setPackageTypeId',
'time_allowance_in_seconds' => 'setTimeAllowanceInSeconds',
'dynamic_package_time_allowance' => 'setDynamicPackageTimeAllowance'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'package_id' => 'getPackageId',
'sim_iccid' => 'getSimIccid',
'date_created' => 'getDateCreated',
'date_expiry' => 'getDateExpiry',
'date_activated' => 'getDateActivated',
'date_terminated' => 'getDateTerminated',
'window_activation_start' => 'getWindowActivationStart',
'window_activation_end' => 'getWindowActivationEnd',
'status' => 'getStatus',
'voice_usage_remaining_in_seconds' => 'getVoiceUsageRemainingInSeconds',
'data_usage_remaining_in_bytes' => 'getDataUsageRemainingInBytes',
'sms_usage_remaining_in_nums' => 'getSmsUsageRemainingInNums',
'package_type_id' => 'getPackageTypeId',
'time_allowance_in_seconds' => 'getTimeAllowanceInSeconds',
'dynamic_package_time_allowance' => 'getDynamicPackageTimeAllowance'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_NOT_ACTIVE = 'NOT_ACTIVE';
const STATUS_ACTIVE = 'ACTIVE';
const STATUS_TERMINATED = 'TERMINATED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_NOT_ACTIVE,
self::STATUS_ACTIVE,
self::STATUS_TERMINATED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['package_id'] = isset($data['package_id']) ? $data['package_id'] : null;
        $this->container['sim_iccid'] = isset($data['sim_iccid']) ? $data['sim_iccid'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['date_expiry'] = isset($data['date_expiry']) ? $data['date_expiry'] : null;
        $this->container['date_activated'] = isset($data['date_activated']) ? $data['date_activated'] : null;
        $this->container['date_terminated'] = isset($data['date_terminated']) ? $data['date_terminated'] : null;
        $this->container['window_activation_start'] = isset($data['window_activation_start']) ? $data['window_activation_start'] : null;
        $this->container['window_activation_end'] = isset($data['window_activation_end']) ? $data['window_activation_end'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['voice_usage_remaining_in_seconds'] = isset($data['voice_usage_remaining_in_seconds']) ? $data['voice_usage_remaining_in_seconds'] : null;
        $this->container['data_usage_remaining_in_bytes'] = isset($data['data_usage_remaining_in_bytes']) ? $data['data_usage_remaining_in_bytes'] : null;
        $this->container['sms_usage_remaining_in_nums'] = isset($data['sms_usage_remaining_in_nums']) ? $data['sms_usage_remaining_in_nums'] : null;
        $this->container['package_type_id'] = isset($data['package_type_id']) ? $data['package_type_id'] : null;
        $this->container['time_allowance_in_seconds'] = isset($data['time_allowance_in_seconds']) ? $data['time_allowance_in_seconds'] : null;
        $this->container['dynamic_package_time_allowance'] = isset($data['dynamic_package_time_allowance']) ? $data['dynamic_package_time_allowance'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['package_id'] === null) {
            $invalidProperties[] = "'package_id' can't be null";
        }
        if ($this->container['sim_iccid'] === null) {
            $invalidProperties[] = "'sim_iccid' can't be null";
        }
        if ($this->container['date_created'] === null) {
            $invalidProperties[] = "'date_created' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['voice_usage_remaining_in_seconds'] === null) {
            $invalidProperties[] = "'voice_usage_remaining_in_seconds' can't be null";
        }
        if ($this->container['data_usage_remaining_in_bytes'] === null) {
            $invalidProperties[] = "'data_usage_remaining_in_bytes' can't be null";
        }
        if ($this->container['sms_usage_remaining_in_nums'] === null) {
            $invalidProperties[] = "'sms_usage_remaining_in_nums' can't be null";
        }
        if ($this->container['package_type_id'] === null) {
            $invalidProperties[] = "'package_type_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets package_id
     *
     * @return string
     */
    public function getPackageId()
    {
        return $this->container['package_id'];
    }

    /**
     * Sets package_id
     *
     * @param string $package_id The unique identifier of a package
     *
     * @return $this
     */
    public function setPackageId($package_id)
    {
        $this->container['package_id'] = $package_id;

        return $this;
    }

    /**
     * Gets sim_iccid
     *
     * @return string
     */
    public function getSimIccid()
    {
        return $this->container['sim_iccid'];
    }

    /**
     * Sets sim_iccid
     *
     * @param string $sim_iccid SIM ICCID
     *
     * @return $this
     */
    public function setSimIccid($sim_iccid)
    {
        $this->container['sim_iccid'] = $sim_iccid;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return int
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param int $date_created The created date of a package in epoch
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_expiry
     *
     * @return int
     */
    public function getDateExpiry()
    {
        return $this->container['date_expiry'];
    }

    /**
     * Sets date_expiry
     *
     * @param int $date_expiry The expiry date of a package in epoch
     *
     * @return $this
     */
    public function setDateExpiry($date_expiry)
    {
        $this->container['date_expiry'] = $date_expiry;

        return $this;
    }

    /**
     * Gets date_activated
     *
     * @return int
     */
    public function getDateActivated()
    {
        return $this->container['date_activated'];
    }

    /**
     * Sets date_activated
     *
     * @param int $date_activated The activation date of a package in epoch
     *
     * @return $this
     */
    public function setDateActivated($date_activated)
    {
        $this->container['date_activated'] = $date_activated;

        return $this;
    }

    /**
     * Gets date_terminated
     *
     * @return int
     */
    public function getDateTerminated()
    {
        return $this->container['date_terminated'];
    }

    /**
     * Sets date_terminated
     *
     * @param int $date_terminated The termination date of a package in epoch
     *
     * @return $this
     */
    public function setDateTerminated($date_terminated)
    {
        $this->container['date_terminated'] = $date_terminated;

        return $this;
    }

    /**
     * Gets window_activation_start
     *
     * @return int
     */
    public function getWindowActivationStart()
    {
        return $this->container['window_activation_start'];
    }

    /**
     * Sets window_activation_start
     *
     * @param int $window_activation_start The date before which the package cannot be activated in epoch
     *
     * @return $this
     */
    public function setWindowActivationStart($window_activation_start)
    {
        $this->container['window_activation_start'] = $window_activation_start;

        return $this;
    }

    /**
     * Gets window_activation_end
     *
     * @return int
     */
    public function getWindowActivationEnd()
    {
        return $this->container['window_activation_end'];
    }

    /**
     * Sets window_activation_end
     *
     * @param int $window_activation_end The time after which the package cannot be activated in epoch
     *
     * @return $this
     */
    public function setWindowActivationEnd($window_activation_end)
    {
        $this->container['window_activation_end'] = $window_activation_end;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The current status of a package
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets voice_usage_remaining_in_seconds
     *
     * @return int
     */
    public function getVoiceUsageRemainingInSeconds()
    {
        return $this->container['voice_usage_remaining_in_seconds'];
    }

    /**
     * Sets voice_usage_remaining_in_seconds
     *
     * @param int $voice_usage_remaining_in_seconds The number of seconds available to be used as part of this package
     *
     * @return $this
     */
    public function setVoiceUsageRemainingInSeconds($voice_usage_remaining_in_seconds)
    {
        $this->container['voice_usage_remaining_in_seconds'] = $voice_usage_remaining_in_seconds;

        return $this;
    }

    /**
     * Gets data_usage_remaining_in_bytes
     *
     * @return int
     */
    public function getDataUsageRemainingInBytes()
    {
        return $this->container['data_usage_remaining_in_bytes'];
    }

    /**
     * Sets data_usage_remaining_in_bytes
     *
     * @param int $data_usage_remaining_in_bytes The number of bytes available to be used as part of this package
     *
     * @return $this
     */
    public function setDataUsageRemainingInBytes($data_usage_remaining_in_bytes)
    {
        $this->container['data_usage_remaining_in_bytes'] = $data_usage_remaining_in_bytes;

        return $this;
    }

    /**
     * Gets sms_usage_remaining_in_nums
     *
     * @return int
     */
    public function getSmsUsageRemainingInNums()
    {
        return $this->container['sms_usage_remaining_in_nums'];
    }

    /**
     * Sets sms_usage_remaining_in_nums
     *
     * @param int $sms_usage_remaining_in_nums The number of SMSs available to be used as part of this package
     *
     * @return $this
     */
    public function setSmsUsageRemainingInNums($sms_usage_remaining_in_nums)
    {
        $this->container['sms_usage_remaining_in_nums'] = $sms_usage_remaining_in_nums;

        return $this;
    }

    /**
     * Gets package_type_id
     *
     * @return int
     */
    public function getPackageTypeId()
    {
        return $this->container['package_type_id'];
    }

    /**
     * Sets package_type_id
     *
     * @param int $package_type_id The unique identifier of a package type that this package instance represents
     *
     * @return $this
     */
    public function setPackageTypeId($package_type_id)
    {
        $this->container['package_type_id'] = $package_type_id;

        return $this;
    }

    /**
     * Gets time_allowance_in_seconds
     *
     * @return int
     */
    public function getTimeAllowanceInSeconds()
    {
        return $this->container['time_allowance_in_seconds'];
    }

    /**
     * Sets time_allowance_in_seconds
     *
     * @param int $time_allowance_in_seconds The time period in seconds that a package lasts for after activation. This property and dynamicTimeAllowance are mutually exclusive. Only one of them must be set.
     *
     * @return $this
     */
    public function setTimeAllowanceInSeconds($time_allowance_in_seconds)
    {
        $this->container['time_allowance_in_seconds'] = $time_allowance_in_seconds;

        return $this;
    }

    /**
     * Gets dynamic_package_time_allowance
     *
     * @return \Swagger\Client\Model\ResponseDynamicPackageTimeAllowance
     */
    public function getDynamicPackageTimeAllowance()
    {
        return $this->container['dynamic_package_time_allowance'];
    }

    /**
     * Sets dynamic_package_time_allowance
     *
     * @param \Swagger\Client\Model\ResponseDynamicPackageTimeAllowance $dynamic_package_time_allowance dynamic_package_time_allowance
     *
     * @return $this
     */
    public function setDynamicPackageTimeAllowance($dynamic_package_time_allowance)
    {
        $this->container['dynamic_package_time_allowance'] = $dynamic_package_time_allowance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
