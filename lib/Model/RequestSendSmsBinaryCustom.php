<?php
/**
 * RequestSendSmsBinaryCustom
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Distributor PPU Service
 *
 * Â© KnowRoaming LTD 2017
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RequestSendSmsBinaryCustom Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RequestSendSmsBinaryCustom implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RequestSendSmsBinaryCustom';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sender_cli' => 'int',
'hex_message' => 'string',
'esm_class' => 'int',
'pid' => 'int',
'dcs' => 'int',
'validity_period_seconds' => 'int',
'udh_hex_string' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sender_cli' => 'int64',
'hex_message' => null,
'esm_class' => 'int32',
'pid' => 'int32',
'dcs' => 'int32',
'validity_period_seconds' => 'int32',
'udh_hex_string' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sender_cli' => 'senderCli',
'hex_message' => 'hexMessage',
'esm_class' => 'esmClass',
'pid' => 'pid',
'dcs' => 'dcs',
'validity_period_seconds' => 'validityPeriodSeconds',
'udh_hex_string' => 'udhHexString'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sender_cli' => 'setSenderCli',
'hex_message' => 'setHexMessage',
'esm_class' => 'setEsmClass',
'pid' => 'setPid',
'dcs' => 'setDcs',
'validity_period_seconds' => 'setValidityPeriodSeconds',
'udh_hex_string' => 'setUdhHexString'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sender_cli' => 'getSenderCli',
'hex_message' => 'getHexMessage',
'esm_class' => 'getEsmClass',
'pid' => 'getPid',
'dcs' => 'getDcs',
'validity_period_seconds' => 'getValidityPeriodSeconds',
'udh_hex_string' => 'getUdhHexString'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sender_cli'] = isset($data['sender_cli']) ? $data['sender_cli'] : null;
        $this->container['hex_message'] = isset($data['hex_message']) ? $data['hex_message'] : null;
        $this->container['esm_class'] = isset($data['esm_class']) ? $data['esm_class'] : null;
        $this->container['pid'] = isset($data['pid']) ? $data['pid'] : null;
        $this->container['dcs'] = isset($data['dcs']) ? $data['dcs'] : null;
        $this->container['validity_period_seconds'] = isset($data['validity_period_seconds']) ? $data['validity_period_seconds'] : null;
        $this->container['udh_hex_string'] = isset($data['udh_hex_string']) ? $data['udh_hex_string'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sender_cli'] === null) {
            $invalidProperties[] = "'sender_cli' can't be null";
        }
        if ($this->container['hex_message'] === null) {
            $invalidProperties[] = "'hex_message' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sender_cli
     *
     * @return int
     */
    public function getSenderCli()
    {
        return $this->container['sender_cli'];
    }

    /**
     * Sets sender_cli
     *
     * @param int $sender_cli The CLI of the sender
     *
     * @return $this
     */
    public function setSenderCli($sender_cli)
    {
        $this->container['sender_cli'] = $sender_cli;

        return $this;
    }

    /**
     * Gets hex_message
     *
     * @return string
     */
    public function getHexMessage()
    {
        return $this->container['hex_message'];
    }

    /**
     * Sets hex_message
     *
     * @param string $hex_message The hex-message to send
     *
     * @return $this
     */
    public function setHexMessage($hex_message)
    {
        $this->container['hex_message'] = $hex_message;

        return $this;
    }

    /**
     * Gets esm_class
     *
     * @return int
     */
    public function getEsmClass()
    {
        return $this->container['esm_class'];
    }

    /**
     * Sets esm_class
     *
     * @param int $esm_class The ESM class to set
     *
     * @return $this
     */
    public function setEsmClass($esm_class)
    {
        $this->container['esm_class'] = $esm_class;

        return $this;
    }

    /**
     * Gets pid
     *
     * @return int
     */
    public function getPid()
    {
        return $this->container['pid'];
    }

    /**
     * Sets pid
     *
     * @param int $pid The PID to set
     *
     * @return $this
     */
    public function setPid($pid)
    {
        $this->container['pid'] = $pid;

        return $this;
    }

    /**
     * Gets dcs
     *
     * @return int
     */
    public function getDcs()
    {
        return $this->container['dcs'];
    }

    /**
     * Sets dcs
     *
     * @param int $dcs The DCS to set
     *
     * @return $this
     */
    public function setDcs($dcs)
    {
        $this->container['dcs'] = $dcs;

        return $this;
    }

    /**
     * Gets validity_period_seconds
     *
     * @return int
     */
    public function getValidityPeriodSeconds()
    {
        return $this->container['validity_period_seconds'];
    }

    /**
     * Sets validity_period_seconds
     *
     * @param int $validity_period_seconds The validity period to set in seconds
     *
     * @return $this
     */
    public function setValidityPeriodSeconds($validity_period_seconds)
    {
        $this->container['validity_period_seconds'] = $validity_period_seconds;

        return $this;
    }

    /**
     * Gets udh_hex_string
     *
     * @return string
     */
    public function getUdhHexString()
    {
        return $this->container['udh_hex_string'];
    }

    /**
     * Sets udh_hex_string
     *
     * @param string $udh_hex_string The UDH to use (hex string)
     *
     * @return $this
     */
    public function setUdhHexString($udh_hex_string)
    {
        $this->container['udh_hex_string'] = $udh_hex_string;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
