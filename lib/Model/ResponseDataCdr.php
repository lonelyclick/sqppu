<?php
/**
 * ResponseDataCdr
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Distributor PPU Service
 *
 * Â© KnowRoaming LTD 2017
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponseDataCdr Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseDataCdr implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResponseDataCdr';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'event_id' => 'string',
'event_name' => 'string',
'event_epoch_milli' => 'int',
'cdr_id' => 'string',
'distributor_id' => 'int',
'sim_iccid' => 'string',
'custom_imsi' => 'int',
'sponsored_id' => 'int',
'sponsored_imsi' => 'int',
'usage_byte' => 'int',
'usage_byte_rounded' => 'int',
'network_id' => 'int',
'network_name' => 'string',
'mcc' => 'string',
'mnc' => 'string',
'country_iso3' => 'string',
'country_name' => 'string',
'package_id' => 'string',
'package_template_name' => 'string',
'package_template_id' => 'int',
'subnet_type' => 'string',
'gt_prefix' => 'int',
'active_session_id' => 'string',
'nsapi' => 'int',
'ip' => 'string',
'rat' => 'string',
'open_epoch_milli' => 'int',
'close_epoch_milli' => 'int',
'costs' => '\Swagger\Client\Model\ResponseDataCdrCost[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'event_id' => null,
'event_name' => null,
'event_epoch_milli' => 'int64',
'cdr_id' => null,
'distributor_id' => 'int32',
'sim_iccid' => null,
'custom_imsi' => 'int64',
'sponsored_id' => 'int32',
'sponsored_imsi' => 'int64',
'usage_byte' => 'int64',
'usage_byte_rounded' => 'int64',
'network_id' => 'int32',
'network_name' => null,
'mcc' => null,
'mnc' => null,
'country_iso3' => null,
'country_name' => null,
'package_id' => null,
'package_template_name' => null,
'package_template_id' => 'int32',
'subnet_type' => null,
'gt_prefix' => 'int64',
'active_session_id' => null,
'nsapi' => 'int32',
'ip' => null,
'rat' => null,
'open_epoch_milli' => 'int64',
'close_epoch_milli' => 'int64',
'costs' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'event_id' => 'eventId',
'event_name' => 'eventName',
'event_epoch_milli' => 'eventEpochMilli',
'cdr_id' => 'cdrId',
'distributor_id' => 'distributorId',
'sim_iccid' => 'simIccid',
'custom_imsi' => 'customImsi',
'sponsored_id' => 'sponsoredId',
'sponsored_imsi' => 'sponsoredImsi',
'usage_byte' => 'usageByte',
'usage_byte_rounded' => 'usageByteRounded',
'network_id' => 'networkId',
'network_name' => 'networkName',
'mcc' => 'mcc',
'mnc' => 'mnc',
'country_iso3' => 'countryIso3',
'country_name' => 'countryName',
'package_id' => 'packageId',
'package_template_name' => 'packageTemplateName',
'package_template_id' => 'packageTemplateId',
'subnet_type' => 'subnetType',
'gt_prefix' => 'gtPrefix',
'active_session_id' => 'activeSessionId',
'nsapi' => 'nsapi',
'ip' => 'ip',
'rat' => 'rat',
'open_epoch_milli' => 'openEpochMilli',
'close_epoch_milli' => 'closeEpochMilli',
'costs' => 'costs'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'event_id' => 'setEventId',
'event_name' => 'setEventName',
'event_epoch_milli' => 'setEventEpochMilli',
'cdr_id' => 'setCdrId',
'distributor_id' => 'setDistributorId',
'sim_iccid' => 'setSimIccid',
'custom_imsi' => 'setCustomImsi',
'sponsored_id' => 'setSponsoredId',
'sponsored_imsi' => 'setSponsoredImsi',
'usage_byte' => 'setUsageByte',
'usage_byte_rounded' => 'setUsageByteRounded',
'network_id' => 'setNetworkId',
'network_name' => 'setNetworkName',
'mcc' => 'setMcc',
'mnc' => 'setMnc',
'country_iso3' => 'setCountryIso3',
'country_name' => 'setCountryName',
'package_id' => 'setPackageId',
'package_template_name' => 'setPackageTemplateName',
'package_template_id' => 'setPackageTemplateId',
'subnet_type' => 'setSubnetType',
'gt_prefix' => 'setGtPrefix',
'active_session_id' => 'setActiveSessionId',
'nsapi' => 'setNsapi',
'ip' => 'setIp',
'rat' => 'setRat',
'open_epoch_milli' => 'setOpenEpochMilli',
'close_epoch_milli' => 'setCloseEpochMilli',
'costs' => 'setCosts'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'event_id' => 'getEventId',
'event_name' => 'getEventName',
'event_epoch_milli' => 'getEventEpochMilli',
'cdr_id' => 'getCdrId',
'distributor_id' => 'getDistributorId',
'sim_iccid' => 'getSimIccid',
'custom_imsi' => 'getCustomImsi',
'sponsored_id' => 'getSponsoredId',
'sponsored_imsi' => 'getSponsoredImsi',
'usage_byte' => 'getUsageByte',
'usage_byte_rounded' => 'getUsageByteRounded',
'network_id' => 'getNetworkId',
'network_name' => 'getNetworkName',
'mcc' => 'getMcc',
'mnc' => 'getMnc',
'country_iso3' => 'getCountryIso3',
'country_name' => 'getCountryName',
'package_id' => 'getPackageId',
'package_template_name' => 'getPackageTemplateName',
'package_template_id' => 'getPackageTemplateId',
'subnet_type' => 'getSubnetType',
'gt_prefix' => 'getGtPrefix',
'active_session_id' => 'getActiveSessionId',
'nsapi' => 'getNsapi',
'ip' => 'getIp',
'rat' => 'getRat',
'open_epoch_milli' => 'getOpenEpochMilli',
'close_epoch_milli' => 'getCloseEpochMilli',
'costs' => 'getCosts'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['event_id'] = isset($data['event_id']) ? $data['event_id'] : null;
        $this->container['event_name'] = isset($data['event_name']) ? $data['event_name'] : null;
        $this->container['event_epoch_milli'] = isset($data['event_epoch_milli']) ? $data['event_epoch_milli'] : null;
        $this->container['cdr_id'] = isset($data['cdr_id']) ? $data['cdr_id'] : null;
        $this->container['distributor_id'] = isset($data['distributor_id']) ? $data['distributor_id'] : null;
        $this->container['sim_iccid'] = isset($data['sim_iccid']) ? $data['sim_iccid'] : null;
        $this->container['custom_imsi'] = isset($data['custom_imsi']) ? $data['custom_imsi'] : null;
        $this->container['sponsored_id'] = isset($data['sponsored_id']) ? $data['sponsored_id'] : null;
        $this->container['sponsored_imsi'] = isset($data['sponsored_imsi']) ? $data['sponsored_imsi'] : null;
        $this->container['usage_byte'] = isset($data['usage_byte']) ? $data['usage_byte'] : null;
        $this->container['usage_byte_rounded'] = isset($data['usage_byte_rounded']) ? $data['usage_byte_rounded'] : null;
        $this->container['network_id'] = isset($data['network_id']) ? $data['network_id'] : null;
        $this->container['network_name'] = isset($data['network_name']) ? $data['network_name'] : null;
        $this->container['mcc'] = isset($data['mcc']) ? $data['mcc'] : null;
        $this->container['mnc'] = isset($data['mnc']) ? $data['mnc'] : null;
        $this->container['country_iso3'] = isset($data['country_iso3']) ? $data['country_iso3'] : null;
        $this->container['country_name'] = isset($data['country_name']) ? $data['country_name'] : null;
        $this->container['package_id'] = isset($data['package_id']) ? $data['package_id'] : null;
        $this->container['package_template_name'] = isset($data['package_template_name']) ? $data['package_template_name'] : null;
        $this->container['package_template_id'] = isset($data['package_template_id']) ? $data['package_template_id'] : null;
        $this->container['subnet_type'] = isset($data['subnet_type']) ? $data['subnet_type'] : null;
        $this->container['gt_prefix'] = isset($data['gt_prefix']) ? $data['gt_prefix'] : null;
        $this->container['active_session_id'] = isset($data['active_session_id']) ? $data['active_session_id'] : null;
        $this->container['nsapi'] = isset($data['nsapi']) ? $data['nsapi'] : null;
        $this->container['ip'] = isset($data['ip']) ? $data['ip'] : null;
        $this->container['rat'] = isset($data['rat']) ? $data['rat'] : null;
        $this->container['open_epoch_milli'] = isset($data['open_epoch_milli']) ? $data['open_epoch_milli'] : null;
        $this->container['close_epoch_milli'] = isset($data['close_epoch_milli']) ? $data['close_epoch_milli'] : null;
        $this->container['costs'] = isset($data['costs']) ? $data['costs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets event_id
     *
     * @return string
     */
    public function getEventId()
    {
        return $this->container['event_id'];
    }

    /**
     * Sets event_id
     *
     * @param string $event_id event_id
     *
     * @return $this
     */
    public function setEventId($event_id)
    {
        $this->container['event_id'] = $event_id;

        return $this;
    }

    /**
     * Gets event_name
     *
     * @return string
     */
    public function getEventName()
    {
        return $this->container['event_name'];
    }

    /**
     * Sets event_name
     *
     * @param string $event_name event_name
     *
     * @return $this
     */
    public function setEventName($event_name)
    {
        $this->container['event_name'] = $event_name;

        return $this;
    }

    /**
     * Gets event_epoch_milli
     *
     * @return int
     */
    public function getEventEpochMilli()
    {
        return $this->container['event_epoch_milli'];
    }

    /**
     * Sets event_epoch_milli
     *
     * @param int $event_epoch_milli event_epoch_milli
     *
     * @return $this
     */
    public function setEventEpochMilli($event_epoch_milli)
    {
        $this->container['event_epoch_milli'] = $event_epoch_milli;

        return $this;
    }

    /**
     * Gets cdr_id
     *
     * @return string
     */
    public function getCdrId()
    {
        return $this->container['cdr_id'];
    }

    /**
     * Sets cdr_id
     *
     * @param string $cdr_id cdr_id
     *
     * @return $this
     */
    public function setCdrId($cdr_id)
    {
        $this->container['cdr_id'] = $cdr_id;

        return $this;
    }

    /**
     * Gets distributor_id
     *
     * @return int
     */
    public function getDistributorId()
    {
        return $this->container['distributor_id'];
    }

    /**
     * Sets distributor_id
     *
     * @param int $distributor_id distributor_id
     *
     * @return $this
     */
    public function setDistributorId($distributor_id)
    {
        $this->container['distributor_id'] = $distributor_id;

        return $this;
    }

    /**
     * Gets sim_iccid
     *
     * @return string
     */
    public function getSimIccid()
    {
        return $this->container['sim_iccid'];
    }

    /**
     * Sets sim_iccid
     *
     * @param string $sim_iccid sim_iccid
     *
     * @return $this
     */
    public function setSimIccid($sim_iccid)
    {
        $this->container['sim_iccid'] = $sim_iccid;

        return $this;
    }

    /**
     * Gets custom_imsi
     *
     * @return int
     */
    public function getCustomImsi()
    {
        return $this->container['custom_imsi'];
    }

    /**
     * Sets custom_imsi
     *
     * @param int $custom_imsi custom_imsi
     *
     * @return $this
     */
    public function setCustomImsi($custom_imsi)
    {
        $this->container['custom_imsi'] = $custom_imsi;

        return $this;
    }

    /**
     * Gets sponsored_id
     *
     * @return int
     */
    public function getSponsoredId()
    {
        return $this->container['sponsored_id'];
    }

    /**
     * Sets sponsored_id
     *
     * @param int $sponsored_id sponsored_id
     *
     * @return $this
     */
    public function setSponsoredId($sponsored_id)
    {
        $this->container['sponsored_id'] = $sponsored_id;

        return $this;
    }

    /**
     * Gets sponsored_imsi
     *
     * @return int
     */
    public function getSponsoredImsi()
    {
        return $this->container['sponsored_imsi'];
    }

    /**
     * Sets sponsored_imsi
     *
     * @param int $sponsored_imsi sponsored_imsi
     *
     * @return $this
     */
    public function setSponsoredImsi($sponsored_imsi)
    {
        $this->container['sponsored_imsi'] = $sponsored_imsi;

        return $this;
    }

    /**
     * Gets usage_byte
     *
     * @return int
     */
    public function getUsageByte()
    {
        return $this->container['usage_byte'];
    }

    /**
     * Sets usage_byte
     *
     * @param int $usage_byte usage_byte
     *
     * @return $this
     */
    public function setUsageByte($usage_byte)
    {
        $this->container['usage_byte'] = $usage_byte;

        return $this;
    }

    /**
     * Gets usage_byte_rounded
     *
     * @return int
     */
    public function getUsageByteRounded()
    {
        return $this->container['usage_byte_rounded'];
    }

    /**
     * Sets usage_byte_rounded
     *
     * @param int $usage_byte_rounded usage_byte_rounded
     *
     * @return $this
     */
    public function setUsageByteRounded($usage_byte_rounded)
    {
        $this->container['usage_byte_rounded'] = $usage_byte_rounded;

        return $this;
    }

    /**
     * Gets network_id
     *
     * @return int
     */
    public function getNetworkId()
    {
        return $this->container['network_id'];
    }

    /**
     * Sets network_id
     *
     * @param int $network_id network_id
     *
     * @return $this
     */
    public function setNetworkId($network_id)
    {
        $this->container['network_id'] = $network_id;

        return $this;
    }

    /**
     * Gets network_name
     *
     * @return string
     */
    public function getNetworkName()
    {
        return $this->container['network_name'];
    }

    /**
     * Sets network_name
     *
     * @param string $network_name network_name
     *
     * @return $this
     */
    public function setNetworkName($network_name)
    {
        $this->container['network_name'] = $network_name;

        return $this;
    }

    /**
     * Gets mcc
     *
     * @return string
     */
    public function getMcc()
    {
        return $this->container['mcc'];
    }

    /**
     * Sets mcc
     *
     * @param string $mcc mcc
     *
     * @return $this
     */
    public function setMcc($mcc)
    {
        $this->container['mcc'] = $mcc;

        return $this;
    }

    /**
     * Gets mnc
     *
     * @return string
     */
    public function getMnc()
    {
        return $this->container['mnc'];
    }

    /**
     * Sets mnc
     *
     * @param string $mnc mnc
     *
     * @return $this
     */
    public function setMnc($mnc)
    {
        $this->container['mnc'] = $mnc;

        return $this;
    }

    /**
     * Gets country_iso3
     *
     * @return string
     */
    public function getCountryIso3()
    {
        return $this->container['country_iso3'];
    }

    /**
     * Sets country_iso3
     *
     * @param string $country_iso3 country_iso3
     *
     * @return $this
     */
    public function setCountryIso3($country_iso3)
    {
        $this->container['country_iso3'] = $country_iso3;

        return $this;
    }

    /**
     * Gets country_name
     *
     * @return string
     */
    public function getCountryName()
    {
        return $this->container['country_name'];
    }

    /**
     * Sets country_name
     *
     * @param string $country_name country_name
     *
     * @return $this
     */
    public function setCountryName($country_name)
    {
        $this->container['country_name'] = $country_name;

        return $this;
    }

    /**
     * Gets package_id
     *
     * @return string
     */
    public function getPackageId()
    {
        return $this->container['package_id'];
    }

    /**
     * Sets package_id
     *
     * @param string $package_id package_id
     *
     * @return $this
     */
    public function setPackageId($package_id)
    {
        $this->container['package_id'] = $package_id;

        return $this;
    }

    /**
     * Gets package_template_name
     *
     * @return string
     */
    public function getPackageTemplateName()
    {
        return $this->container['package_template_name'];
    }

    /**
     * Sets package_template_name
     *
     * @param string $package_template_name package_template_name
     *
     * @return $this
     */
    public function setPackageTemplateName($package_template_name)
    {
        $this->container['package_template_name'] = $package_template_name;

        return $this;
    }

    /**
     * Gets package_template_id
     *
     * @return int
     */
    public function getPackageTemplateId()
    {
        return $this->container['package_template_id'];
    }

    /**
     * Sets package_template_id
     *
     * @param int $package_template_id package_template_id
     *
     * @return $this
     */
    public function setPackageTemplateId($package_template_id)
    {
        $this->container['package_template_id'] = $package_template_id;

        return $this;
    }

    /**
     * Gets subnet_type
     *
     * @return string
     */
    public function getSubnetType()
    {
        return $this->container['subnet_type'];
    }

    /**
     * Sets subnet_type
     *
     * @param string $subnet_type subnet_type
     *
     * @return $this
     */
    public function setSubnetType($subnet_type)
    {
        $this->container['subnet_type'] = $subnet_type;

        return $this;
    }

    /**
     * Gets gt_prefix
     *
     * @return int
     */
    public function getGtPrefix()
    {
        return $this->container['gt_prefix'];
    }

    /**
     * Sets gt_prefix
     *
     * @param int $gt_prefix gt_prefix
     *
     * @return $this
     */
    public function setGtPrefix($gt_prefix)
    {
        $this->container['gt_prefix'] = $gt_prefix;

        return $this;
    }

    /**
     * Gets active_session_id
     *
     * @return string
     */
    public function getActiveSessionId()
    {
        return $this->container['active_session_id'];
    }

    /**
     * Sets active_session_id
     *
     * @param string $active_session_id active_session_id
     *
     * @return $this
     */
    public function setActiveSessionId($active_session_id)
    {
        $this->container['active_session_id'] = $active_session_id;

        return $this;
    }

    /**
     * Gets nsapi
     *
     * @return int
     */
    public function getNsapi()
    {
        return $this->container['nsapi'];
    }

    /**
     * Sets nsapi
     *
     * @param int $nsapi nsapi
     *
     * @return $this
     */
    public function setNsapi($nsapi)
    {
        $this->container['nsapi'] = $nsapi;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string $ip ip
     *
     * @return $this
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets rat
     *
     * @return string
     */
    public function getRat()
    {
        return $this->container['rat'];
    }

    /**
     * Sets rat
     *
     * @param string $rat rat
     *
     * @return $this
     */
    public function setRat($rat)
    {
        $this->container['rat'] = $rat;

        return $this;
    }

    /**
     * Gets open_epoch_milli
     *
     * @return int
     */
    public function getOpenEpochMilli()
    {
        return $this->container['open_epoch_milli'];
    }

    /**
     * Sets open_epoch_milli
     *
     * @param int $open_epoch_milli open_epoch_milli
     *
     * @return $this
     */
    public function setOpenEpochMilli($open_epoch_milli)
    {
        $this->container['open_epoch_milli'] = $open_epoch_milli;

        return $this;
    }

    /**
     * Gets close_epoch_milli
     *
     * @return int
     */
    public function getCloseEpochMilli()
    {
        return $this->container['close_epoch_milli'];
    }

    /**
     * Sets close_epoch_milli
     *
     * @param int $close_epoch_milli close_epoch_milli
     *
     * @return $this
     */
    public function setCloseEpochMilli($close_epoch_milli)
    {
        $this->container['close_epoch_milli'] = $close_epoch_milli;

        return $this;
    }

    /**
     * Gets costs
     *
     * @return \Swagger\Client\Model\ResponseDataCdrCost[]
     */
    public function getCosts()
    {
        return $this->container['costs'];
    }

    /**
     * Sets costs
     *
     * @param \Swagger\Client\Model\ResponseDataCdrCost[] $costs costs
     *
     * @return $this
     */
    public function setCosts($costs)
    {
        $this->container['costs'] = $costs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
